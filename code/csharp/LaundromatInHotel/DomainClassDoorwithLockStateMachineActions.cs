// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;

namespace LaundromatInHotel
{
    partial class DomainClassDoorwithLockStateMachine
    {
        protected void ActionLocked()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Door is locked in unused situation.
            // Waiting for a card key to be touched.
            // SELF.RequestCardKey();
            // SELF.Status = DoorStatus::Locked;


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionCheckingSituationForUse(string cardKeyId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Check the user touched the card key is valid or not.
            // If the user is valid then open the door. 
            // SELECT ANY cardKey FROM INSTANCES OF CardKey WHERE SELECTED.CardKeyID == RCVD_EVT.cardKeyId;
            // SELECT ONE machine RELATED BY SELF->WashingMachine[R14];
            // SELECT ONE reservableMachine RELATED BY machine->ReservableWashingMachine[R15];
            // ASSIGN isValid = FALSE;
            // IF ( NOT_EMPTY reservableMachine )
            // 	SELECT ONE nextReservation RELATED BY reservableMachine->WashingMachineReservation[R19.'next reservation'];
            // 	IF ( NOT_EMPTY nextReservation )
            // 		SELECT ONE guestStay RELATED BY nextReservation->GuestStay[R12.'reservation owner'];
            // 		IF ( guestStay.GuestStayID == cardKey.GuestStayID )
            // 			SELF.Unlock();
            // 			SELF.Status = DoorStatus::Unlocked;
            // 			SELECT ONE workingSpec RELATED BY nextReservation->AvailableWorkingSpec[R13.'target'];
            // 			GENERATE DoorwithLock7(specId:workingSpec.WorkingSpecID, guestStayId:guestStay.GuestStayID) TO SELF;
            // 			isValid = TRUE;
            // 		END IF;
            // 	END IF;
            // ELSE
            // 	isValid = TRUE;
            // END IF;
            // 
            // IF ( NOT isValid )
            // 	GENERATE DoorwithLock6 TO SELF;
            // END IF;


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionWaitForPINCodeToOpen()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // The door opened.
            // Waiting for the PIN code to be unlocked.


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionLockedForWashing()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Now that the door is closed,
            // lock the door and notify the washing machine
            // that laundry can be started.
            // Self.Lock();
            // SELECT ONE machine RELATED BY SELF->WashingMachine[R14];
            // GENERATE WashingMachine1:'Assigned guest' TO machine;
            // 
            // SELF.Status = DoorStatus::Locked;


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionCheckingSituationForTake(string cardKeyId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Some card key is touched
            // so check current situation is
            // suitable for open the door.
            // If it is valid then waiting for the PIN code.
            // SELECT ANY cardKey FROM INSTANCES OF CardKey WHERE SELECTED.CardKeyID == RCVD_EVT.cardKeyId;
            // SELECT ONE guestStayForCard RELATED BY cardKey->GuestStay[R6.'is assigned as key for'];
            // SELECT ONE guestStayInUse RELATED BY SELF->WashingMachine[R14]->WashingMachineinUse[R18]->GuestStay[R18.'is used by'];
            // IF ( guestStayForCard.GuestStayID == guestStayInUse.GuestStayID )
            // 	GENERATE DoorwithLock5 TO SELF;
            // END IF;


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionCheckingPINCodeForOpen(string pinCode)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Wait for valid PIN code.
            // When valid PIN code is entered,
            // try to open the door.
            // IF ( SELF.PIN_Number == RCVD_EVT.pinCode )
            // 	GENERATE DoorwithLock5 TO SELF;
            // END IF;


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionDoorOpened()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // The door opened actually.
            // Wait for the door to close.
            // SELECT ONE machine RELATED BY SELF->WashingMachine[R14];
            // GENERATE WashingMachine6:'Start taking' TO machine;
            // 
            // SELF.Status = DoorStatus::Unlocked;


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionWaitForClose(string pinCode)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Waiting for Door closed.
            // SELF.PIN_Number = RCVD_EVT.pinCode;
            // 


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionWaitForDoorOpen()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Wait for the door actually to open. 
            // SELF.Unlock();


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionWaitForSpec(string specId, string guestStayId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Confirm Spec and open the door.
            // SELECT ANY workingSpec FROM INSTANCES OF AvailableWorkingSpec WHERE SELECTED.WorkingSpecID == RCVD_EVT.specId;
            // SELECT ONE washingMachine RELATED BY workingSpec->WashingMachine[R8];
            // SELECT ANY guestStay FROM INSTANCES OF GuestStay WHERE SELECTED.GuestStayID == RCVD_EVT.guestStayId;
            // CREATE OBJECT INSTANCE inUse OF WashingMachineinUse;
            // RELATE guestStay TO washingMachine ACROSS R18 USING inUse;
            // RELATE inUse TO workingSpec ACROSS R9;
            // 
            // SELF.Unlock();
            // SELF.Status = DoorStatus::Unlocked;


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionWaitForPINCodeForOpen()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Request PIN Code for opening...
            // SELF.RequestPINCode();


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

        protected void ActionUnlockAvailabled()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.
            // Notify the user that the laundry is done.
            // SELECT ONE guestStay RELATED BY SELF->WashingMachine[R14]->WashingMachineinUse[R18]->GuestStay[R18.'is used by'];
            // guestStay.Notify( topic:NotificationForGuestStay::LaundryCompleted );
            // SELF.RequestCardKey();


            // Please record changing states by using changedStates;
            
            throw new NotImplementedException();
            // Please delete above throw exception statement after implement this method.
        }

    }
}
