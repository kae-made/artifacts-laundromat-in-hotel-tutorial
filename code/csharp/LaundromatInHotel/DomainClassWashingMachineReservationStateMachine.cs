// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.0.1
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;

namespace LaundromatInHotel
{
    public partial class DomainClassWashingMachineReservationStateMachine : StateMachineBase, ITransition
    {
        public enum Events
        {
            WashingMachineReservation1 = 0,     // Try to reserve
            WashingMachineReservation2 = 1,     // Assigned
            WashingMachineReservation3 = 2,     // Pre alarm is time up
            WashingMachineReservation4 = 3,     // Time is up
            WashingMachineReservation5 = 4,     // Canceled
            WashingMachineReservation6 = 5    // Rejected
        }

        public enum States
        {
            _NoState_ = 0,
            WaitForAssignment = 1,
            Reserved = 2,
            PreNotified = 3,
            WashingMachineIsAssigned = 4,
            Canceled = 5,
            NoWashingMachine = 6
        }

        private interface IEventArgsSpecIdGuestStayIdReservationTimeDef
        {
            public string specId { get; set; }
            public string guestStayId { get; set; }
            public DateTime reservationTime { get; set; }
        }
        public class WashingMachineReservation1_TryToReserve : EventData, IEventArgsSpecIdGuestStayIdReservationTimeDef
        {
            public WashingMachineReservation1_TryToReserve() : base((int)Events.WashingMachineReservation1)
            {
                ;
            }

            public string specId { get; set; }
            public string guestStayId { get; set; }
            public DateTime reservationTime { get; set; }
            WashingMachineReservation1_TryToReserve Create(DomainClassWashingMachineReservation receiver, string specId, string guestStayId, DateTime reservationTime, InstanceRepository instanceRepository)
            {
                var newEvent = new WashingMachineReservation1_TryToReserve() { specId = specId, guestStayId = guestStayId, reservationTime = reservationTime };
                if (receiver == null && instanceRepository != null)
                {
                    receiver = DomainClassWashingMachineReservationBase.CreateInstance(instanceRepository);
                }
                receiver.TakeEvent(newEvent);

                return newEvent;
            }
        }

        public class WashingMachineReservation2_Assigned : EventData
        {
            public WashingMachineReservation2_Assigned() : base((int)Events.WashingMachineReservation2)
            {
                ;
            }

            WashingMachineReservation2_Assigned Create(DomainClassWashingMachineReservation receiver)
            {
                var newEvent = new WashingMachineReservation2_Assigned();
                if (receiver != null)
                {
                    receiver.TakeEvent(newEvent);
                }

                return newEvent;
            }
        }

        public class WashingMachineReservation3_PreAlarmIsTimeUp : EventData
        {
            public WashingMachineReservation3_PreAlarmIsTimeUp() : base((int)Events.WashingMachineReservation3)
            {
                ;
            }

            WashingMachineReservation3_PreAlarmIsTimeUp Create(DomainClassWashingMachineReservation receiver)
            {
                var newEvent = new WashingMachineReservation3_PreAlarmIsTimeUp();
                if (receiver != null)
                {
                    receiver.TakeEvent(newEvent);
                }

                return newEvent;
            }
        }

        public class WashingMachineReservation4_TimeIsUp : EventData
        {
            public WashingMachineReservation4_TimeIsUp() : base((int)Events.WashingMachineReservation4)
            {
                ;
            }

            WashingMachineReservation4_TimeIsUp Create(DomainClassWashingMachineReservation receiver)
            {
                var newEvent = new WashingMachineReservation4_TimeIsUp();
                if (receiver != null)
                {
                    receiver.TakeEvent(newEvent);
                }

                return newEvent;
            }
        }

        public class WashingMachineReservation5_Canceled : EventData
        {
            public WashingMachineReservation5_Canceled() : base((int)Events.WashingMachineReservation5)
            {
                ;
            }

            WashingMachineReservation5_Canceled Create(DomainClassWashingMachineReservation receiver)
            {
                var newEvent = new WashingMachineReservation5_Canceled();
                if (receiver != null)
                {
                    receiver.TakeEvent(newEvent);
                }

                return newEvent;
            }
        }

        public class WashingMachineReservation6_Rejected : EventData
        {
            public WashingMachineReservation6_Rejected() : base((int)Events.WashingMachineReservation6)
            {
                ;
            }

            WashingMachineReservation6_Rejected Create(DomainClassWashingMachineReservation receiver)
            {
                var newEvent = new WashingMachineReservation6_Rejected();
                if (receiver != null)
                {
                    receiver.TakeEvent(newEvent);
                }

                return newEvent;
            }
        }

        protected DomainClassWashingMachineReservation target;

        public DomainClassWashingMachineReservationStateMachine(DomainClassWashingMachineReservation target) : base(0)
        {
            this.target = target;
            this.stateTransition = this;
        }

        protected int[,] stateTransitionTable = new int[6, 6]
            {
                { (int)ITransition.Transition.CantHappen, (int)States.Reserved, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)States.NoWashingMachine }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)States.PreNotified, (int)ITransition.Transition.CantHappen, (int)States.Canceled, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)States.WashingMachineIsAssigned, (int)States.Canceled, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)States.Canceled, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.Ignore, (int)ITransition.Transition.Ignore, (int)ITransition.Transition.Ignore, (int)ITransition.Transition.Ignore, (int)ITransition.Transition.Ignore }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.Ignore, (int)ITransition.Transition.CantHappen }
            };

        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
            switch (nextState)
            {
            case (int)States.WaitForAssignment:
                ActionWaitForAssignment(((IEventArgsSpecIdGuestStayIdReservationTimeDef)eventData).specId, ((IEventArgsSpecIdGuestStayIdReservationTimeDef)eventData).guestStayId, ((IEventArgsSpecIdGuestStayIdReservationTimeDef)eventData).reservationTime);
                break;
            case (int)States.Reserved:
                ActionReserved();
                break;
            case (int)States.PreNotified:
                ActionPreNotified();
                break;
            case (int)States.WashingMachineIsAssigned:
                ActionWashingMachineIsAssigned();
                break;
            case (int)States.Canceled:
                ActionCanceled();
                break;
            case (int)States.NoWashingMachine:
                ActionNoWashingMachine();
                break;
            }
        }
    }
}
