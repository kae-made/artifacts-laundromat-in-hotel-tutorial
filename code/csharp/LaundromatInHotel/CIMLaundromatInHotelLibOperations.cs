// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.0.1
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace LaundromatInHotel
{
    public partial class CIMLaundromatInHotelLib
    {
        public void CreateHotel(string name)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // CREATE OBJECT INSTANCE hotel OF Hotel;
            // hotel.Name = param.name;
            // 
            // CREATE OBJECT INSTANCE machineAssigner OF WashingMachineAssigner;
            // RELATE hotel TO machineAssigner ACROSS R10;


            throw new NotImplementedException();
        }
        public void CreateLaundromantRoom(int floor, int roomNumber, string hotelId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // CREATE OBJECT INSTANCE room OF LaundromatRoom;
            // room.Floor = param.floor;
            // room.RoomNumber = param.roomNumber;
            // 
            // SELECT ANY hotel FROM INSTANCES OF Hotel WHERE SELECTED.HotelID == param.hotelId;
            // RELATE room TO hotel ACROSS R1;


            throw new NotImplementedException();
        }
        public void CreateWashingMachine(string roomId, bool isReservable)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // CREATE OBJECT INSTANCE machine OF WashingMachine;
            // SELECT ANY room FROM INSTANCES OF LaundromatRoom WHERE SELECTED.RoomID == PARAM.roomId;
            // RELATE machine TO room ACROSS R2;
            // 
            // CREATE OBJECT INSTANCE door OF DoorwithLock;
            // RELATE machine TO door ACROSS R14;
            // 
            // IF ( PARAM.isReservable )
            // 	CREATE OBJECT INSTANCE reservable OF ReservableWashingMachine;
            // 	RELATE reservable TO machine ACROSS R15;
            // ELSE
            // 	CREATE OBJECT INSTANCE nonReservable OF NonReservationWashingMachine;
            // 	RELATE nonReservable TO machine ACROSS R15;
            // END IF;


            throw new NotImplementedException();
        }
        public bool CreateWorkingSpec(int washingTime, int dryingTime, int standardWaight, int price)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // ASSIGN created = FALSE;
            // SELECT ANY specs FROM INSTANCES OF WorkingSpec
            //   WHERE SELECTED.WashingTime == PARAM.washingTime AND SELECTED.DryingTime == PARAM.dryingTime
            //     AND SELECTED.StandardWeight == PARAM.standardWaight AND SELECTED.Price == PARAM.price;
            // IF ( EMPTY specs )
            // 	CREATE OBJECT INSTANCE newSpec OF WorkingSpec;
            // 	newSpec.WashingTime = PARAM.washingTime;
            // 	newSpec.DryingTime = PARAM.dryingTime;
            // 	newSpec.StandardWeight = PARAM.standardWaight;
            // 	newSpec.Price = PARAM.price;
            // 	created = TRUE;
            // END IF;
            // RETURN created;


            throw new NotImplementedException();
        }
        public void AssignAvailableWorkingSpec(string machineId, string specId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // SELECT ANY spec FROM INSTANCES OF WorkingSpec WHERE SELECTED.WorkingSpecID == PARAM.specId;
            // CREATE OBJECT INSTANCE availableSpec OF AvailableWorkingSpec;
            // RELATE machine TO spec ACROSS R8 USING availableSpec;


            throw new NotImplementedException();
        }
        public void CreateGuestRoom(string hotelId, int floor, int roomNumber, string name, int capacity)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY hotel FROM INSTANCES OF Hotel WHERE SELECTED.HotelID == PARAM.hotelId;
            // CREATE OBJECT INSTANCE room OF GuestRoom;
            // RELATE room TO hotel ACROSS R3;
            // room.Floor = PARAM.floor;
            // room.RoomNumber = PARAM.roomNumber;
            // room.Name = PARAM.name;
            // room.Capacity = PARAM.capacity;


            throw new NotImplementedException();
        }
        public void CreateGuestStay(string roomId, DateTime startTime, DateTime endTime)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY room FROM INSTANCES OF GuestRoom WHERE SELECTED.RoomID == PARAM.roomId;
            // CREATE OBJECT INSTANCE stay OF GuestStay;
            // RELATE stay TO room ACROSS R4;
            // stay.StartTime = PARAM.startTime;
            // stay.EndTimeOfValidity = PARAM.endTime;


            throw new NotImplementedException();
        }
        public bool AssignGuest(string name, string mailAddress, string guestStayId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // ASSIGN created = FALSE;
            // SELECT ANY guestStay FROM INSTANCES OF GuestStay WHERE SELECTED.GuestStayID == PARAM.guestStayId;
            // SELECT MANY guests RELATED BY guestStay->Guest[R5];
            // SELECT ONE room RELATED BY guestStay->GuestRoom[R4.'is assigned for'];
            // IF (CARDINALITY guests < room.Capacity )
            // 	CREATE OBJECT INSTANCE guest OF Guest;
            // 	guest.Name = PARAM.name;
            // 	guest.MailAddress = PARAM.mailAddress;
            // 	RELATE guest TO guestStay ACROSS R5;
            // 	created = TRUE;
            // END IF;
            // 
            // RETURN created;


            throw new NotImplementedException();
        }
        public void TouchCardKey(string machineId, string cardKeyId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // GENERATE WashingMachine7 TO machine;


            throw new NotImplementedException();
        }
        public void EnterPINCode(string machineId, string pinCode)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // SELECT ONE door RELATED BY machine->DoorwithLock[R14.'front door'];
            // GENERATE DoorwithLock4(pinCode:PARAM.pinCode) TO door;


            throw new NotImplementedException();
        }
        public void DoorOpened(string machineId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // SELECT ONE door RELATED BY machine->DoorwithLock[R14.'front door'];
            // GENERATE DoorwithLock3 TO door;


            throw new NotImplementedException();
        }
        public void DoorClosed(string machineId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // SELECT ONE door RELATED BY machine->DoorwithLock[R14.'front door'];
            // GENERATE DoorwithLock2 TO door;


            throw new NotImplementedException();
        }
        public void TakenOut(string machineId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // GENERATE WashingMachine7 TO machine;


            throw new NotImplementedException();
        }
        public bool CreateCardKey(string guestStayId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // ASSIGN created = FALSE;
            // SELECT ANY guestStay FROM INSTANCES OF GuestStay WHERE SELECTED.GuestStayID == PARAM.guestStayId;
            // SELECT ONE cardKey RELATED BY guestStay->CardKey[R6];
            // IF ( EMPTY cardKey )
            // 	CREATE OBJECT INSTANCE cardKey OF CardKey;
            // 	RELATE cardKey TO guestStay ACROSS R6;
            // 	created = TRUE;
            // END IF;
            // 
            // RETURN created;


            throw new NotImplementedException();
        }
        public void WashingMachineDoneWashing(string machineId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // GENERATE WashingMachine3 TO machine;


            throw new NotImplementedException();
        }
        public void WashingMachineDoneDrying(string machineId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // GENERATE WashingMachine5 TO machine;


            throw new NotImplementedException();
        }
        public void WashingMachineDoneInterupt(string machineId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY machine FROM INSTANCES OF WashingMachine WHERE SELECTED.MachineID == PARAM.machineId;
            // GENERATE WashingMachine9 TO machine;


            throw new NotImplementedException();
        }
        public void ReservationCreate(string specId, string guestStayId, DateTime reservationTime)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // GENERATE WashingMachineReservation1:'Try to reserve'(specId:PARAM.specId, guestStayId:PARAM.guestStayId, reservationTime:PARAM.reservationTime) TO WashingMachineReservation Creator;


            throw new NotImplementedException();
        }
        public void ReservationCancel(string reservationId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            // SELECT ANY reservation FROM INSTANCES OF WashingMachineReservation WHERE SELECTED.ReservationID == PARAM.reservationId;
            // GENERATE WashingMachineReservation5:Canceled TO reservation;


            throw new NotImplementedException();
        }
    }
}
