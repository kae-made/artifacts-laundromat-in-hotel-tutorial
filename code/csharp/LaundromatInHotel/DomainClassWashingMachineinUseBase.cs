// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.0.1
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;

namespace LaundromatInHotel
{
    public partial class DomainClassWashingMachineinUseBase : DomainClassWashingMachineinUse
    {
        private static readonly string className = "WashingMachineinUse";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassWashingMachineinUseBase CreateInstance(InstanceRepository instanceRepository, Logger logger)
        {
            var newInstance = new DomainClassWashingMachineinUseBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineinUse(UseId={newInstance.Attr_UseId}):create");
            instanceRepository.Add(newInstance);

            return newInstance;
        }

        public DomainClassWashingMachineinUseBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_UseId = Guid.NewGuid().ToString();
        }

        string attr_UseId;
        string attr_WorkingSpecID;
        string attr_GuestStayID;
        string attr_MachineID;

        public string Attr_UseId { get { return attr_UseId; } set { attr_UseId = value; } }
        public string Attr_WorkingSpecID { get { return attr_WorkingSpecID; } }
        public string Attr_GuestStayID { get { return attr_GuestStayID; } }
        public string Attr_MachineID { get { return attr_MachineID; } }

        private DomainClassAvailableWorkingSpec relR9AvailableWorkingSpecCurrentSpec;
        private DomainClassGuestStay relR18GuestStayIsUsedBy;
        private DomainClassWashingMachine relR18WashingMachineIsUsing;

        public DomainClassAvailableWorkingSpec LinkedR9CurrentSpec()
        {
            if (relR9AvailableWorkingSpecCurrentSpec == null)
            {
                var candidates = instanceRepository.GetDomainInstances("AvailableWorkingSpec").Where(inst=>(this.Attr_WorkingSpecID==((DomainClassAvailableWorkingSpec)inst).Attr_WorkingSpecID && this.Attr_MachineID==((DomainClassAvailableWorkingSpec)inst).Attr_MachineID));
                relR9AvailableWorkingSpecCurrentSpec = (DomainClassAvailableWorkingSpec)candidates.First();
            }
            return relR9AvailableWorkingSpecCurrentSpec;
        }

        public bool LinkR9CurrentSpec(DomainClassAvailableWorkingSpec instance)
        {
            bool result = false;
            if (relR9AvailableWorkingSpecCurrentSpec == null)
            {
                this.attr_WorkingSpecID = instance.Attr_WorkingSpecID;
                this.attr_MachineID = instance.Attr_MachineID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineinUse(UseId={this.Attr_UseId}):linked[from(AvailableWorkingSpec(MachineID={instance.Attr_MachineID},WorkingSpecID={instance.Attr_WorkingSpecID}))]");
                result = true;
            }
            return result;
        }
        public bool UnlinkR9CurrentSpec(DomainClassAvailableWorkingSpec instance)
        {
            bool result = false;
            if (relR9AvailableWorkingSpecCurrentSpec != null && ( this.Attr_WorkingSpecID==instance.Attr_WorkingSpecID && this.Attr_MachineID==instance.Attr_MachineID ))
            {
                this.attr_WorkingSpecID = null;
                this.attr_MachineID = null;
                relR9AvailableWorkingSpecCurrentSpec = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineinUse(UseId={this.Attr_UseId}):unlinked[from(AvailableWorkingSpec(MachineID={instance.Attr_MachineID},WorkingSpecID={instance.Attr_WorkingSpecID}))]");
                result = true;
            }
            return result;
        }
        public bool LinkR18(DomainClassGuestStay oneInstanceIsUsedBy, DomainClassWashingMachine otherInstanceIsUsing)
        {
            bool result = false;
            if (relR18GuestStayIsUsedBy == null && relR18WashingMachineIsUsing == null)
            {
                this.attr_GuestStayID = oneInstanceIsUsedBy.Attr_GuestStayID;
                this.attr_MachineID = otherInstanceIsUsing.Attr_MachineID;
                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineinUse(UseId={this.Attr_UseId}):linked[one(GuestStay(GuestStayID={relR18GuestStayIsUsedBy.Attr_GuestStayID}))other(Kae.CIM.MetaModel.CIMofCIM.CIMClassO_OBJBase(MachineID={relR18WashingMachineIsUsing.Attr_MachineID}))]");
                result = true;
            }
            return result;
        }
        public bool UnlinkR18(DomainClassGuestStay oneInstanceIsUsedBy, DomainClassWashingMachine otherInstanceIsUsing)
        {
            bool result = false;
            if (relR18GuestStayIsUsedBy != null && relR18WashingMachineIsUsing != null)
            {
                if ((this.Attr_GuestStayID==oneInstanceIsUsedBy.Attr_GuestStayID) && (this.Attr_MachineID==otherInstanceIsUsing.Attr_MachineID))
                {

                    this.attr_GuestStayID = null;
                    this.attr_MachineID = null;
                    relR18GuestStayIsUsedBy = null;
                    relR18WashingMachineIsUsing = null;

                    if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineinUse(UseId={this.Attr_UseId}):unlinked[one(GuestStay(GuestStayID={relR18GuestStayIsUsedBy.Attr_GuestStayID}))other(Kae.CIM.MetaModel.CIMofCIM.CIMClassO_OBJBase(MachineID={relR18WashingMachineIsUsing.Attr_MachineID}))]");
                    result = true;
                }
            }
            return result;
        }
        public DomainClassGuestStay LinkedR18OneIsUsedBy()
        {
            if (relR18GuestStayIsUsedBy == null)
            {
                var candidates = instanceRepository.GetDomainInstances("GuestStay").Where(inst=>(this.Attr_GuestStayID==((DomainClassGuestStay)inst).Attr_GuestStayID));
                relR18GuestStayIsUsedBy = (DomainClassGuestStay)candidates.First();
            }
            return relR18GuestStayIsUsedBy;
        }
        public DomainClassWashingMachine LinkedR18OtherIsUsing()
        {
            if (relR18WashingMachineIsUsing == null)
            {
                var candidates = instanceRepository.GetDomainInstances("WashingMachine").Where(inst=>(this.Attr_MachineID==((DomainClassWashingMachine)inst).Attr_MachineID));
                relR18WashingMachineIsUsing = (DomainClassWashingMachine)candidates.First();
            }
            return relR18WashingMachineIsUsing;
        }

        
        public bool Validate()
        {
            bool isValid = true;
            if (relR9AvailableWorkingSpecCurrentSpec == null)
            {
                isValid = false;
            }
            if (relR18GuestStayIsUsedBy == null)
            {
                isValid = false;
            }
            if (relR18WashingMachineIsUsing == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void Dispose()
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineinUse(UseId={this.Attr_UseId}):delete");
            instanceRepository.Delete(this);
        }
    }
}
