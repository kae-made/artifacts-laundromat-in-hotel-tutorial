// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Kae.StateMachine;
using Kae.DomainModel.Csharp.Framework;

namespace LaundromatInHotel
{

    public interface DomainClassDoorwithLock : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_DoorID { get; }
        string Attr_PIN_Number { get; set; }
        int Attr_NumberOfDigits { get; set; }
        DomainTypeDoorStatus Attr_Status { get; set; }
        int Attr_current_state { get; }


        // State Machine

        void TakeEvent(EventData domainEvent, bool selfEvent=false);

        // Relationships 

        public DomainClassWashingMachine LinkedR14();


        // Conceptual Information Class's Operations

        public void Unlock();

        public void Close();

        public void Lock();

        public void RequestPINCode();

        public void RequestCardKey();



    }

    public interface DomainClassGuestStay : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_GuestStayID { get; }
        DateTime Attr_StartTime { get; set; }
        DateTime Attr_EndTimeOfValidity { get; set; }
        string Attr_RoomID { get; }
        int Attr_Charge { get; set; }


        // Relationships 

        public DomainClassGuestRoom LinkedR4IsAssignedFor();

        public bool LinkR4IsAssignedFor(DomainClassGuestRoom instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR4IsAssignedFor(DomainClassGuestRoom instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassGuest> LinkedR5();
        public DomainClassCardKey LinkedR6();
        public DomainClassWashingMachineReservation LinkedR12RequestOfReservation();

        public IEnumerable<DomainClassWashingMachineinUse> LinkedR18OtherIsUsing();


        // Conceptual Information Class's Operations

        public void Notify(DomainTypeNotificationForGuestStay topic);



    }

    public interface DomainClassGuest : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_Name { get; set; }
        string Attr_GuestID { get; }
        string Attr_GuestStayID { get; }
        string Attr_MailAddress { get; set; }


        // Relationships 

        public DomainClassGuestStay LinkedR5HaveTheRightToUse();

        public bool LinkR5HaveTheRightToUse(DomainClassGuestStay instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR5HaveTheRightToUse(DomainClassGuestStay instance, IList<ChangedState> changedStates=null);


        // Conceptual Information Class's Operations



    }

    public interface DomainClassHotel : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_HotelID { get; }
        string Attr_Name { get; set; }


        // Relationships 


        public IEnumerable<DomainClassLaundromatRoom> LinkedR1ProvideLaundromantService();

        public IEnumerable<DomainClassGuestRoom> LinkedR3ProvideAsGuestStayingService();
        public DomainClassWashingMachineAssigner LinkedR10ResponsibleForAssignment();


        // Conceptual Information Class's Operations

        public void Support(string message);



    }

    public interface DomainClassLaundromatRoom : DomainClassDef
    {
        // Conceptual Information Class's Properties

        int Attr_Floor { get; set; }
        int Attr_RoomNumber { get; set; }
        string Attr_HotelID { get; }
        string Attr_RoomID { get; }


        // Relationships 

        public DomainClassHotel LinkedR1();

        public bool LinkR1(DomainClassHotel instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR1(DomainClassHotel instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassWashingMachine> LinkedR2();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassWashingMachineAssigner : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_HotelID { get; }
        int Attr_current_state { get; }
        DomainTypeComplexDataType Attr_Test { get; set; }


        // State Machine

        void TakeEvent(EventData domainEvent, bool selfEvent=false);

        // Relationships 

        public DomainClassHotel LinkedR10();

        public bool LinkR10(DomainClassHotel instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR10(DomainClassHotel instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassAvailableWorkingSpec> LinkedR11AssigningTarget();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassWashingMachine : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_MachineID { get; }
        string Attr_FriendryName { get; set; }
        bool Attr_IsBusy { get; set; }
        string Attr_RoomID { get; }
        string Attr_DoorID { get; }
        DomainTypeWashingMachineStatus Attr_Status { get; set; }
        int Attr_current_state { get; }


        // State Machine

        void TakeEvent(EventData domainEvent, bool selfEvent=false);

        // Relationships 

        public DomainClassLaundromatRoom LinkedR2IsSetUpAt();

        public bool LinkR2IsSetUpAt(DomainClassLaundromatRoom instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR2IsSetUpAt(DomainClassLaundromatRoom instance, IList<ChangedState> changedStates=null);
        public DomainClassDoorwithLock LinkedR14FrontDoor();

        public bool LinkR14FrontDoor(DomainClassDoorwithLock instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR14FrontDoor(DomainClassDoorwithLock instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassAvailableWorkingSpec> LinkedR8OtherAvailableSpec();

        public SubClassR15 GetSubR15();

        public DomainClassNonReservationWashingMachine LinkedR15NonReservationWashingMachine();

        public DomainClassReservableWashingMachine LinkedR15ReservableWashingMachine();

        public DomainClassWashingMachineinUse LinkedR18OneIsUsedBy();


        // Conceptual Information Class's Operations

        public bool IsAvailable();

        public void StopExecution();

        public void StartWashing(int timeInMinutes);

        public void StartDrying(int timeInMinutes);



    }

    public interface DomainClassWorkingSpec : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_WorkingSpecID { get; }
        int Attr_WashingTime { get; set; }
        int Attr_DryingTime { get; set; }
        int Attr_StandardWeight { get; set; }
        int Attr_Price { get; set; }


        // Relationships 


        public IEnumerable<DomainClassAvailableWorkingSpec> LinkedR8One();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassWashingMachineinUse : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_UseId { get; }
        string Attr_WorkingSpecID { get; }
        string Attr_GuestStayID { get; }
        string Attr_MachineID { get; }


        // Relationships 

        public DomainClassAvailableWorkingSpec LinkedR9CurrentSpec();

        public bool LinkR9CurrentSpec(DomainClassAvailableWorkingSpec instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR9CurrentSpec(DomainClassAvailableWorkingSpec instance, IList<ChangedState> changedStates=null);
        public bool LinkR18(DomainClassGuestStay oneInstanceIsUsedBy, DomainClassWashingMachine otherInstanceIsUsing, IList<ChangedState> changedStates=null);
        public bool UnlinkR18(DomainClassGuestStay oneInstanceIsUsedBy, DomainClassWashingMachine otherInstanceIsUsing, IList<ChangedState> changedStates=null);
        public DomainClassGuestStay LinkedR18OneIsUsedBy();
        public DomainClassWashingMachine LinkedR18OtherIsUsing();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassWashingMachineReservation : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_ReservationID { get; }
        DateTime Attr_ReservationTime { get; set; }
        DateTime Attr_EstimatedEndTime { get; set; }
        int Attr_PreAlarmTime { get; set; }
        string Attr_GuestStayID { get; }
        string Attr_WorkingSpecID { get; }
        string Attr_successor_ReservationID { get; }
        int Attr_current_state { get; }
        string Attr_MachineID { get; }
        Kae.DomainModel.Csharp.Framework.ExternalEntities.TIM.Timer Attr_AlarmTimer { get; set; }


        // State Machine

        void TakeEvent(EventData domainEvent, bool selfEvent=false);

        // Relationships 

        public DomainClassGuestStay LinkedR12ReservationOwner();

        public bool LinkR12ReservationOwner(DomainClassGuestStay instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR12ReservationOwner(DomainClassGuestStay instance, IList<ChangedState> changedStates=null);
        public DomainClassAvailableWorkingSpec LinkedR13Target();

        public bool LinkR13Target(DomainClassAvailableWorkingSpec instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR13Target(DomainClassAvailableWorkingSpec instance, IList<ChangedState> changedStates=null);
        public DomainClassWashingMachineReservation LinkedR17Successor();

        public bool LinkR17Successor(DomainClassWashingMachineReservation instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR17Successor(DomainClassWashingMachineReservation instance, IList<ChangedState> changedStates=null);
        public DomainClassWashingMachineReservation LinkedR17Predecessor();
        public DomainClassReservableWashingMachine LinkedR19();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassReservableWashingMachine : DomainClassDef, SubClassR15
    {
        // Conceptual Information Class's Properties

        string Attr_MachineID { get; }
        int Attr_current_state { get; }
        string Attr_Next_ReservationID { get; }


        // State Machine

        void TakeEvent(EventData domainEvent, bool selfEvent=false);

        // Relationships 

        public DomainClassWashingMachine GetSuperClassR15();
        public bool LinkR15(DomainClassWashingMachine instance, IList<ChangedState> changedStates=null);
        public bool UnlinkR15(DomainClassWashingMachine instance, IList<ChangedState> changedStates=null);
        public DomainClassWashingMachineReservation LinkedR19NextReservation();

        public bool LinkR19NextReservation(DomainClassWashingMachineReservation instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR19NextReservation(DomainClassWashingMachineReservation instance, IList<ChangedState> changedStates=null);


        // Conceptual Information Class's Operations



    }

    public interface DomainClassNonReservationWashingMachine : DomainClassDef, SubClassR15
    {
        // Conceptual Information Class's Properties

        string Attr_MachineID { get; }


        // Relationships 

        public DomainClassWashingMachine GetSuperClassR15();
        public bool LinkR15(DomainClassWashingMachine instance, IList<ChangedState> changedStates=null);
        public bool UnlinkR15(DomainClassWashingMachine instance, IList<ChangedState> changedStates=null);


        // Conceptual Information Class's Operations



    }

    public interface DomainClassGuestRoom : DomainClassDef
    {
        // Conceptual Information Class's Properties

        int Attr_Floor { get; set; }
        int Attr_RoomNumber { get; set; }
        string Attr_Name { get; set; }
        string Attr_RoomID { get; }
        int Attr_Capacity { get; set; }
        string Attr_HotelID { get; }


        // Relationships 

        public DomainClassHotel LinkedR3();

        public bool LinkR3(DomainClassHotel instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR3(DomainClassHotel instance, IList<ChangedState> changedStates=null);
        public DomainClassGuestStay LinkedR4();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassCardKey : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_CardKeyID { get; }
        string Attr_GuestStayID { get; }


        // Relationships 

        public DomainClassGuestStay LinkedR6IsAssignedAsKeyFor();

        public bool LinkR6IsAssignedAsKeyFor(DomainClassGuestStay instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR6IsAssignedAsKeyFor(DomainClassGuestStay instance, IList<ChangedState> changedStates=null);


        // Conceptual Information Class's Operations



    }

    public interface DomainClassAvailableWorkingSpec : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_HotelID { get; }
        string Attr_MachineID { get; }
        string Attr_WorkingSpecID { get; }
        int Attr_PreAlarmSec { get; set; }


        // Relationships 

        public DomainClassWashingMachineAssigner LinkedR11();

        public bool LinkR11(DomainClassWashingMachineAssigner instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR11(DomainClassWashingMachineAssigner instance, IList<ChangedState> changedStates=null);
        public bool LinkR8(DomainClassWashingMachine oneInstance, DomainClassWorkingSpec otherInstanceAvailableSpec, IList<ChangedState> changedStates=null);
        public bool UnlinkR8(DomainClassWashingMachine oneInstance, DomainClassWorkingSpec otherInstanceAvailableSpec, IList<ChangedState> changedStates=null);
        public DomainClassWashingMachine LinkedR8One();
        public DomainClassWorkingSpec LinkedR8OtherAvailableSpec();
        public DomainClassWashingMachineinUse LinkedR9();

        public IEnumerable<DomainClassWashingMachineReservation> LinkedR13();


        // Conceptual Information Class's Operations



    }
}
