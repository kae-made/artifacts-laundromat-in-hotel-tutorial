// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace LaundromatInHotel
{
    public partial class DomainClassHotelBase : DomainClassHotel
    {
        protected static readonly string className = "Hotel";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassHotelBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null)
        {
            var newInstance = new DomainClassHotelBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:Hotel(HotelID={newInstance.Attr_HotelID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassHotelBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_HotelID = Guid.NewGuid().ToString();
        }

        protected string attr_HotelID;
        protected bool stateof_HotelID = false;

        protected string attr_Name;
        protected bool stateof_Name = false;


        public string Attr_HotelID { get { return attr_HotelID; } set { attr_HotelID = value; stateof_HotelID = true; } }
        public string Attr_Name { get { return attr_Name; } set { attr_Name = value; stateof_Name = true; } }

        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassHotel instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "HotelID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_HotelID)
                        {
                            result = false;
                        }
                        break;
                    case "Name":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Name)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }

        public IEnumerable<DomainClassLaundromatRoom> LinkedR1ProvideLaundromantService()
        {
            var result = new List<DomainClassLaundromatRoom>();
            var candidates = instanceRepository.GetDomainInstances("LaundromatRoom").Where(inst=>(this.Attr_HotelID==((DomainClassLaundromatRoom)inst).Attr_HotelID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassLaundromatRoom)c);
            }
            return result;
        }
        public IEnumerable<DomainClassGuestRoom> LinkedR3ProvideAsGuestStayingService()
        {
            var result = new List<DomainClassGuestRoom>();
            var candidates = instanceRepository.GetDomainInstances("GuestRoom").Where(inst=>(this.Attr_HotelID==((DomainClassGuestRoom)inst).Attr_HotelID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassGuestRoom)c);
            }
            return result;
        }
        public DomainClassWashingMachineAssigner LinkedR10ResponsibleForAssignment()
        {
            var candidates = instanceRepository.GetDomainInstances("WashingMachineAssigner").Where(inst=>(this.Attr_HotelID==((DomainClassWashingMachineAssigner)inst).Attr_HotelID));
            return (DomainClassWashingMachineAssigner)candidates.First();
        }
        
        public bool Validate()
        {
            bool isValid = true;
            if (this.LinkedR3ProvideAsGuestStayingService().Count() == 0)
            {
                isValid = false;
            }

            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:Hotel(HotelID={this.Attr_HotelID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            attr_HotelID = (string)propertyValues["HotelID"];
            stateof_HotelID = false;
            attr_Name = (string)propertyValues["Name"];
            stateof_Name = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_HotelID)
            {
                results.Add("HotelID", attr_HotelID);
                stateof_HotelID = false;
            }
            if (stateof_Name)
            {
                results.Add("Name", attr_Name);
                stateof_Name = false;
            }

            return results;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            results.Add("HotelID", attr_HotelID);
            if (!onlyIdentity) results.Add("Name", attr_Name);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
