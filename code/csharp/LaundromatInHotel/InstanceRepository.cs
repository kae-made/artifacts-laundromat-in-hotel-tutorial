// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Kae.Utility.Logging;

namespace LaundromatInHotel
{
    public abstract class InstanceRepository
    {
        private Dictionary<string, List<DomainClassDef>> domainInstances = new Dictionary<string, List<DomainClassDef>>();

        public void Add(DomainClassDef instance)
        {
            if (!domainInstances.ContainsKey(instance.ClassName))
            {
                domainInstances.Add(instance.ClassName, new List<DomainClassDef>());
            }
            domainInstances[instance.ClassName].Add(instance);
        }

        public bool Delete(DomainClassDef instance)
        {
            bool result = false;

            if (domainInstances.ContainsKey(instance.ClassName))
            {
                if (domainInstances[instance.ClassName].Contains(instance))
                {
                    domainInstances[instance.ClassName].Remove(instance);
                    if (domainInstances[instance.ClassName].Count == 0)
                    {
                        domainInstances.Remove(instance.ClassName);
                    }
                    result = true;
                }
            }

            return result;
        }

        public IEnumerable<DomainClassDef> GetDomainInstances(string domainName)
        {
            List<DomainClassDef> result = new List<DomainClassDef>();

            if (domainInstances.ContainsKey(domainName))
            {
                var instances = domainInstances[domainName];
                foreach(var instance in instances)
                {
                    result.Add(instance);
                }
            }

            return result;
        }

        ///
        /// Update stored state of the instance by changed argument.
        /// changed.key is name of property of the instance.
        /// changed.value is value of the property that the name of it  is changed.key
        ///
        public abstract void UpdateState(DomainClassDef instance, IDictionary<string, object> chnaged);

        ///
        /// Construct state of the instances by instances argument.
        /// instances.key is domain class name.
        /// instances.value is instances states of the domain class.
        /// each item of the instances.value is property name and value pairs.
        ///
        public abstract void LoadState(IDictionary<string, IList<IDictionary<string, object>>> instances);

    }

    public class InstanceRepositoryInMemory : InstanceRepository
    {
        private Logger logger;

        public InstanceRepositoryInMemory(Logger logger)
        {
            this.logger = logger;
        }

        public override void UpdateState(DomainClassDef instance, IDictionary<string, object> chnaged)
        {
            // Do nothing.
        }

        public override void LoadState(IDictionary<string, IList<IDictionary<string, object>>> instances)
        {
            foreach (var className in instances.Keys)
            {
                foreach (var states in instances[className])
                {
                    DomainClassDef newInstance = null;
                    switch (className)
                    {
                        case "AvailableWorkingSpec":
                            newInstance = DomainClassAvailableWorkingSpecBase.CreateInstance(this, logger);
                            break;
                        case "CardKey":
                            newInstance = DomainClassCardKeyBase.CreateInstance(this, logger);
                            break;
                        case "DoorwithLock":
                            newInstance = DomainClassDoorwithLockBase.CreateInstance(this, logger);
                            break;
                        case "Guest":
                            newInstance = DomainClassGuestBase.CreateInstance(this, logger);
                            break;
                        case "GuestRoom":
                            newInstance = DomainClassGuestRoomBase.CreateInstance(this, logger);
                            break;
                        case "GuestStay":
                            newInstance = DomainClassGuestStayBase.CreateInstance(this, logger);
                            break;
                        case "Hotel":
                            newInstance = DomainClassHotelBase.CreateInstance(this, logger);
                            break;
                        case "LaundromatRoom":
                            newInstance = DomainClassLaundromatRoomBase.CreateInstance(this, logger);
                            break;
                        case "NonReservationWashingMachine":
                            newInstance = DomainClassNonReservationWashingMachineBase.CreateInstance(this, logger);
                            break;
                        case "ReservableWashingMachine":
                            newInstance = DomainClassReservableWashingMachineBase.CreateInstance(this, logger);
                            break;
                        case "WashingMachine":
                            newInstance = DomainClassWashingMachineBase.CreateInstance(this, logger);
                            break;
                        case "WashingMachineAssigner":
                            newInstance = DomainClassWashingMachineAssignerBase.CreateInstance(this, logger);
                            break;
                        case "WashingMachineinUse":
                            newInstance = DomainClassWashingMachineinUseBase.CreateInstance(this, logger);
                            break;
                        case "WashingMachineReservation":
                            newInstance = DomainClassWashingMachineReservationBase.CreateInstance(this, logger);
                            break;
                        case "WorkingSpec":
                            newInstance = DomainClassWorkingSpecBase.CreateInstance(this, logger);
                            break;
                        default:
                            if (logger != null) logger.LogError($"{className} is not right domain class.");
                            break;
                    }
                    if (newInstance != null)
                    {
                        newInstance.Restore(states);
                    }
                }
            }
        }

    }

}
