// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.DomainModel.Csharp.Framework;

namespace LaundromatInHotel
{
    partial class DomainClassWashingMachineStateMachine
    {
        protected void ActionStandby()
        {
            // Action Description on Model as a reference.

            //  1 : // No one is using the washing machine.
            //  2 : SELECT ONE inUse RELATED BY SELF->WashingMachineinUse[R18];
            //  3 : SELECT ONE guestStay RELATED BY inUse->GuestStay[R18.'is used by'];
            //  4 : UNRELATE guestStay FROM SELF ACROSS R18 USING inUse;
            //  5 : DELETE OBJECT INSTANCE inUse;
            //  6 : 
            //  7 : SELF.Status = WashingMachineStatus::Ready;

            // Line : 2
            var inUse = target.LinkedR18OneIsUsedBy();

            // Line : 3
            var guestStay = inUse.LinkedR18OneIsUsedBy();

            // Line : 4
            // Unrelate guestStay From SELF Across R18 Using inUse
            inUse.UnlinkR18(guestStay,target);

            // Line : 5
            inUse.DeleteInstance(changedStates);
            // Line : 7
            target.Attr_Status = DomainTypeWashingMachineStatus.Ready;

        }

        protected void ActionWashing()
        {
            // Action Description on Model as a reference.

            //   1 : // Guest user is assigned.
            //   2 : // If there is a washing instruction, transition to start washing.
            //   3 : // If there is no washing instruction and there is drying instruction, transition to start drying.
            //   4 : SELECT ONE inUse RELATED BY SELF->WashingMachineinUse[R18];
            //   5 : SELECT ONE workingSpec RELATED BY inUse->AvailableWorkingSpec[R9.'current spec']->WorkingSpec[R8.'available spec'];
            //   6 : IF ( workingSpec.WashingTime > 0 )
            //   7 : 	SELF.StartWashing( timeInMinutes: workingSpec.WashingTime );
            //   8 : 	SELF.Status = WashingMachineStatus::Washing;
            //   9 : ELSE
            //  10 : 	GENERATE WashingMachine3 TO SELF;
            //  11 : END IF;

            // Line : 4
            var inUse = target.LinkedR18OneIsUsedBy();

            // Line : 5
            var workingSpec = inUse.LinkedR9CurrentSpec().LinkedR8OtherAvailableSpec();

            // Line : 6
            if ((workingSpec.Attr_WashingTime > 0))
            {
                // Line : 7
                target.StartWashing(timeInMinutes:workingSpec.Attr_WashingTime);
                // Line : 8
                target.Attr_Status = DomainTypeWashingMachineStatus.Washing;
            }
            else
            {
                // Line : 10
                DomainClassWashingMachineStateMachine.WashingMachine3_DoneWashing.Create(receiver:target, sendNow:true);

            }


        }

        protected void ActionWashingCompletedAndDrying()
        {
            // Action Description on Model as a reference.

            //  1 : // Start drying...
            //  2 : SELECT ONE inUse RELATED BY SELF->WashingMachineinUse[R18];
            //  3 : SELECT ONE workingSpec RELATED BY inUse->AvailableWorkingSpec[R9.'current spec']->WorkingSpec[R8.'available spec'];
            //  4 : IF ( workingSpec.DryingTime > 0 )
            //  5 : 	SELF.StartDrying( timeInMinutes: workingSpec.WashingTime );
            //  6 : 	SELF.Status = WashingMachineStatus::Drying;
            //  7 : ELSE
            //  8 : 	GENERATE WashingMachine6 TO SELF;
            //  9 : END IF;

            // Line : 2
            var inUse = target.LinkedR18OneIsUsedBy();

            // Line : 3
            var workingSpec = inUse.LinkedR9CurrentSpec().LinkedR8OtherAvailableSpec();

            // Line : 4
            if ((workingSpec.Attr_DryingTime > 0))
            {
                // Line : 5
                target.StartDrying(timeInMinutes:workingSpec.Attr_WashingTime);
                // Line : 6
                target.Attr_Status = DomainTypeWashingMachineStatus.Drying;
            }
            else
            {
                // Line : 8
                DomainClassWashingMachineStateMachine.WashingMachine6_StartTaking.Create(receiver:target, sendNow:true);

            }


        }

        protected void ActionDryingCompleted()
        {
            // Action Description on Model as a reference.

            //  1 : // Notify now is that door unlock become available.
            //  2 : SELECT ONE door RELATED BY SELF->DoorwithLock[R14.'front door'];
            //  3 : GENERATE DoorwithLock8 TO door;
            //  4 : 
            //  5 : SELF.Status = WashingMachineStatus::WaitForTaking;

            // Line : 2
            var door = target.LinkedR14FrontDoor();

            // Line : 3
            DomainClassDoorwithLockStateMachine.DoorwithLock8_UnlockedAllowed.Create(receiver:door, sendNow:true);

            // Line : 5
            target.Attr_Status = DomainTypeWashingMachineStatus.WaitForTaking;

        }

        protected void ActionWaitForTaking()
        {
            // Action Description on Model as a reference.

            //  1 : // Tell the guest to take out and wait.

        }

        protected void ActionInterupting()
        {
            // Action Description on Model as a reference.

            //  1 : // By some reason, try to stop working.
            //  2 : SELF.StopExecution();

            // Line : 2
            target.StopExecution();

        }

        protected void ActionInterupted()
        {
            // Action Description on Model as a reference.

            //  1 : // Notify now is that door unlock become available.
            //  2 : SELECT ONE door RELATED BY SELF->DoorwithLock[R14.'front door'];
            //  3 : GENERATE DoorwithLock8 TO door;
            //  4 : 
            //  5 : SELF.Status = WashingMachineStatus::Interupted;

            // Line : 2
            var door = target.LinkedR14FrontDoor();

            // Line : 3
            DomainClassDoorwithLockStateMachine.DoorwithLock8_UnlockedAllowed.Create(receiver:door, sendNow:true);

            // Line : 5
            target.Attr_Status = DomainTypeWashingMachineStatus.Interupted;

        }

    }
}
