// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace LaundromatInHotel
{
    public partial class DomainClassGuestRoomBase : DomainClassGuestRoom
    {
        protected static readonly string className = "GuestRoom";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassGuestRoomBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null)
        {
            var newInstance = new DomainClassGuestRoomBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:GuestRoom(RoomID={newInstance.Attr_RoomID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassGuestRoomBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_RoomID = Guid.NewGuid().ToString();
        }
        protected int attr_Floor;
        protected bool stateof_Floor = false;

        protected int attr_RoomNumber;
        protected bool stateof_RoomNumber = false;

        protected string attr_Name;
        protected bool stateof_Name = false;

        protected string attr_RoomID;
        protected bool stateof_RoomID = false;

        protected int attr_Capacity;
        protected bool stateof_Capacity = false;

        protected string attr_HotelID;
        protected bool stateof_HotelID = false;

        public int Attr_Floor { get { return attr_Floor; } set { attr_Floor = value; stateof_Floor = true; } }
        public int Attr_RoomNumber { get { return attr_RoomNumber; } set { attr_RoomNumber = value; stateof_RoomNumber = true; } }
        public string Attr_Name { get { return attr_Name; } set { attr_Name = value; stateof_Name = true; } }
        public string Attr_RoomID { get { return attr_RoomID; } set { attr_RoomID = value; stateof_RoomID = true; } }
        public int Attr_Capacity { get { return attr_Capacity; } set { attr_Capacity = value; stateof_Capacity = true; } }
        public string Attr_HotelID { get { return attr_HotelID; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassGuestRoom instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "Floor":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_Floor)
                        {
                            result = false;
                        }
                        break;
                    case "RoomNumber":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_RoomNumber)
                        {
                            result = false;
                        }
                        break;
                    case "Name":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Name)
                        {
                            result = false;
                        }
                        break;
                    case "RoomID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_RoomID)
                        {
                            result = false;
                        }
                        break;
                    case "Capacity":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_Capacity)
                        {
                            result = false;
                        }
                        break;
                    case "HotelID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_HotelID)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR3Hotel;
        public DomainClassHotel LinkedR3()
        {
            if (relR3Hotel == null)
            {
           var candidates = instanceRepository.GetDomainInstances("Hotel").Where(inst=>(this.Attr_HotelID==((DomainClassHotel)inst).Attr_HotelID));
           relR3Hotel = new LinkedInstance() { Source = this, Destination = candidates.First(), RelationshipID = "R3", Phrase = "" };

            }
            return relR3Hotel.GetDestination<DomainClassHotel>();
        }

        public bool LinkR3(DomainClassHotel instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR3Hotel == null)
            {
                this.attr_HotelID = instance.Attr_HotelID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:GuestRoom(RoomID={this.Attr_RoomID}):link[Hotel(HotelID={instance.Attr_HotelID})]");

                result = (LinkedR3()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR3Hotel });
                }
            }
            return result;
        }

        public bool UnlinkR3(DomainClassHotel instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR3Hotel != null && ( this.Attr_HotelID==instance.Attr_HotelID ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR3Hotel });
        
                this.attr_HotelID = null;
                relR3Hotel = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:GuestRoom(RoomID={this.Attr_RoomID}):unlink[Hotel(HotelID={instance.Attr_HotelID})]");


                result = true;
            }
            return result;
        }
        public DomainClassGuestStay LinkedR4()
        {
            var candidates = instanceRepository.GetDomainInstances("GuestStay").Where(inst=>(this.Attr_RoomID==((DomainClassGuestStay)inst).Attr_RoomID));
            return (DomainClassGuestStay)candidates.First();
        }


        
        public bool Validate()
        {
            bool isValid = true;
            if (relR3Hotel == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:GuestRoom(RoomID={this.Attr_RoomID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            attr_Floor = (int)propertyValues["Floor"];
            stateof_Floor = false;
            attr_RoomNumber = (int)propertyValues["RoomNumber"];
            stateof_RoomNumber = false;
            attr_Name = (string)propertyValues["Name"];
            stateof_Name = false;
            attr_RoomID = (string)propertyValues["RoomID"];
            stateof_RoomID = false;
            attr_Capacity = (int)propertyValues["Capacity"];
            stateof_Capacity = false;
            attr_HotelID = (string)propertyValues["HotelID"];
            stateof_HotelID = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_Floor)
            {
                results.Add("Floor", attr_Floor);
                stateof_Floor = false;
            }
            if (stateof_RoomNumber)
            {
                results.Add("RoomNumber", attr_RoomNumber);
                stateof_RoomNumber = false;
            }
            if (stateof_Name)
            {
                results.Add("Name", attr_Name);
                stateof_Name = false;
            }
            if (stateof_RoomID)
            {
                results.Add("RoomID", attr_RoomID);
                stateof_RoomID = false;
            }
            if (stateof_Capacity)
            {
                results.Add("Capacity", attr_Capacity);
                stateof_Capacity = false;
            }
            if (stateof_HotelID)
            {
                results.Add("HotelID", attr_HotelID);
                stateof_HotelID = false;
            }

            return results;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("Floor", attr_Floor);
            if (!onlyIdentity) results.Add("RoomNumber", attr_RoomNumber);
            if (!onlyIdentity) results.Add("Name", attr_Name);
            results.Add("RoomID", attr_RoomID);
            if (!onlyIdentity) results.Add("Capacity", attr_Capacity);
            if (!onlyIdentity) results.Add("HotelID", attr_HotelID);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
