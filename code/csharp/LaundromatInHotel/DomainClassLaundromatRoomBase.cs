// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.0.1
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;

namespace LaundromatInHotel
{
    public partial class DomainClassLaundromatRoomBase : DomainClassLaundromatRoom
    {
        private static readonly string className = "LaundromatRoom";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassLaundromatRoomBase CreateInstance(InstanceRepository instanceRepository, Logger logger)
        {
            var newInstance = new DomainClassLaundromatRoomBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LaundromatRoom(RoomID={newInstance.Attr_RoomID}):create");

            instanceRepository.Add(newInstance);

            return newInstance;
        }

        public DomainClassLaundromatRoomBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_RoomID = Guid.NewGuid().ToString();
        }

        int attr_Floor;
        bool stateof_Floor = false;

        int attr_RoomNumber;
        bool stateof_RoomNumber = false;

        string attr_HotelID;
        bool stateof_HotelID = false;

        string attr_RoomID;
        bool stateof_RoomID = false;


        public int Attr_Floor { get { return attr_Floor; } set { attr_Floor = value; stateof_Floor = true; } }
        public int Attr_RoomNumber { get { return attr_RoomNumber; } set { attr_RoomNumber = value; stateof_RoomNumber = true; } }
        public string Attr_HotelID { get { return attr_HotelID; } }
        public string Attr_RoomID { get { return attr_RoomID; } set { attr_RoomID = value; stateof_RoomID = true; } }

        private DomainClassHotel relR1Hotel;

        public DomainClassHotel LinkedR1()
        {
            if (relR1Hotel == null)
            {
                var candidates = instanceRepository.GetDomainInstances("Hotel").Where(inst=>(this.Attr_HotelID==((DomainClassHotel)inst).Attr_HotelID));
                relR1Hotel = (DomainClassHotel)candidates.First();
            }
            return relR1Hotel;
        }

        public bool LinkR1(DomainClassHotel instance)
        {
            bool result = false;
            if (relR1Hotel == null)
            {
                this.attr_HotelID = instance.Attr_HotelID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LaundromatRoom(RoomID={this.Attr_RoomID}):link[Hotel(HotelID={instance.Attr_HotelID})]");

                result = true;
            }
            return result;
        }
        public bool UnlinkR1(DomainClassHotel instance)
        {
            bool result = false;
            if (relR1Hotel != null && ( this.Attr_HotelID==instance.Attr_HotelID ))
            {
                this.attr_HotelID = null;
                relR1Hotel = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LaundromatRoom(RoomID={this.Attr_RoomID}):unlink[Hotel(HotelID={instance.Attr_HotelID})]");


                result = true;
            }
            return result;
        }

        public IEnumerable<DomainClassWashingMachine> LinkedR2()
        {
            var result = new List<DomainClassWashingMachine>();
            var candidates = instanceRepository.GetDomainInstances("WashingMachine").Where(inst=>(this.Attr_RoomID==((DomainClassWashingMachine)inst).Attr_RoomID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassWashingMachine)c);
            }
            return result;
        }
        
        public bool Validate()
        {
            bool isValid = true;
            if (relR1Hotel == null)
            {
                isValid = false;
            }
            if (this.LinkedR2().Count() == 0)
            {
                isValid = false;
            }

            return isValid;
        }

        public void Dispose()
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LaundromatRoom(RoomID={this.Attr_RoomID}):delete");

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(Dictionary<string, object> propertyValues)
        {
            attr_Floor = (int)propertyValues["Floor"];
            stateof_Floor = false;
            attr_RoomNumber = (int)propertyValues["RoomNumber"];
            stateof_RoomNumber = false;
            attr_HotelID = (string)propertyValues["HotelID"];
            stateof_HotelID = false;
            attr_RoomID = (string)propertyValues["RoomID"];
            stateof_RoomID = false;
        }
        
        public Dictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_Floor)
            {
                results.Add("Floor", attr_Floor);
                stateof_Floor = false;
            }
            if (stateof_RoomNumber)
            {
                results.Add("RoomNumber", attr_RoomNumber);
                stateof_RoomNumber = false;
            }
            if (stateof_HotelID)
            {
                results.Add("HotelID", attr_HotelID);
                stateof_HotelID = false;
            }
            if (stateof_RoomID)
            {
                results.Add("RoomID", attr_RoomID);
                stateof_RoomID = false;
            }

            return results;
        }
        
        public Dictionary<string, object> GetProperties()
        {
            var results = new Dictionary<string, object>();
            results.Add("Floor", attr_Floor);
            results.Add("RoomNumber", attr_RoomNumber);
            results.Add("HotelID", attr_HotelID);
            results.Add("RoomID", attr_RoomID);

            return results;
        }

    }
}
