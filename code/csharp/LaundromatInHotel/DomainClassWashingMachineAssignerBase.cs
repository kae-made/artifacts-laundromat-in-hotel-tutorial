// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace LaundromatInHotel
{
    public partial class DomainClassWashingMachineAssignerBase : DomainClassWashingMachineAssigner
    {
        protected static readonly string className = "WashingMachineAssigner";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassWashingMachineAssignerBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null)
        {
            var newInstance = new DomainClassWashingMachineAssignerBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={newInstance.Attr_HotelID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassWashingMachineAssignerBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            stateMachine = new DomainClassWashingMachineAssignerStateMachine(this, instanceRepository, logger);
        }
        protected string attr_HotelID;
        protected bool stateof_HotelID = false;

        protected DomainClassWashingMachineAssignerStateMachine stateMachine;
        protected bool stateof_current_state = false;

        protected DomainTypeComplexDataType attr_Test;
        protected bool stateof_Test = false;

        public string Attr_HotelID { get { return attr_HotelID; } }
        public int Attr_current_state { get { return stateMachine.CurrentState; } }
        public DomainTypeComplexDataType Attr_Test { get { return attr_Test; } set { attr_Test = value; stateof_Test = true; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassWashingMachineAssigner instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "HotelID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_HotelID)
                        {
                            result = false;
                        }
                        break;
                    case "Test":
                        if ((DomainTypeComplexDataType)conditionPropertyValues[propertyName] != instance.Attr_Test)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR10Hotel;
        public DomainClassHotel LinkedR10()
        {
            if (relR10Hotel == null)
            {
           var candidates = instanceRepository.GetDomainInstances("Hotel").Where(inst=>(this.Attr_HotelID==((DomainClassHotel)inst).Attr_HotelID));
           relR10Hotel = new LinkedInstance() { Source = this, Destination = candidates.First(), RelationshipID = "R10", Phrase = "" };

            }
            return relR10Hotel.GetDestination<DomainClassHotel>();
        }

        public bool LinkR10(DomainClassHotel instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR10Hotel == null)
            {
                this.attr_HotelID = instance.Attr_HotelID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={this.Attr_HotelID}):link[Hotel(HotelID={instance.Attr_HotelID})]");

                result = (LinkedR10()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR10Hotel });
                }
            }
            return result;
        }

        public bool UnlinkR10(DomainClassHotel instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR10Hotel != null && ( this.Attr_HotelID==instance.Attr_HotelID ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR10Hotel });
        
                this.attr_HotelID = null;
                relR10Hotel = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={this.Attr_HotelID}):unlink[Hotel(HotelID={instance.Attr_HotelID})]");


                result = true;
            }
            return result;
        }

        public IEnumerable<DomainClassAvailableWorkingSpec> LinkedR11AssigningTarget()
        {
            var result = new List<DomainClassAvailableWorkingSpec>();
            var candidates = instanceRepository.GetDomainInstances("AvailableWorkingSpec").Where(inst=>(this.Attr_HotelID==((DomainClassAvailableWorkingSpec)inst).Attr_HotelID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassAvailableWorkingSpec)c);
            }
            return result;
        }



        public void TakeEvent(EventData domainEvent, bool selfEvent=false)
        {
            if (selfEvent)
            {
                stateMachine.ReceivedSelfEvent(domainEvent).Wait();
            }
            else
            {
                stateMachine.ReceivedEvent(domainEvent).Wait();
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={this.Attr_HotelID}):takeEvent({domainEvent.EventNumber})");
        }

        
        public bool Validate()
        {
            bool isValid = true;
            if (relR10Hotel == null)
            {
                isValid = false;
            }
            if (this.LinkedR11AssigningTarget().Count() == 0)
            {
                isValid = false;
            }

            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={this.Attr_HotelID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            attr_HotelID = (string)propertyValues["HotelID"];
            stateof_HotelID = false;
            stateMachine.ForceUpdateState((int)propertyValues["current_state"]);
            attr_Test = (DomainTypeComplexDataType)propertyValues["Test"];
            stateof_Test = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_HotelID)
            {
                results.Add("HotelID", attr_HotelID);
                stateof_HotelID = false;
            }
            results.Add("current_state", stateMachine.CurrentState);

            if (stateof_Test)
            {
                results.Add("Test", attr_Test);
                stateof_Test = false;
            }

            return results;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("HotelID", attr_HotelID);
            results.Add("current_state", stateMachine.CurrentState);
            if (!onlyIdentity) results.Add("Test", attr_Test);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
