// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;

namespace LaundromatInHotel
{
    public partial class DomainClassWashingMachineAssignerBase : DomainClassWashingMachineAssigner
    {
        private static readonly string className = "WashingMachineAssigner";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassWashingMachineAssignerBase CreateInstance(InstanceRepository instanceRepository, Logger logger)
        {
            var newInstance = new DomainClassWashingMachineAssignerBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={newInstance.Attr_HotelID}):create");

            instanceRepository.Add(newInstance);

            return newInstance;
        }

        public DomainClassWashingMachineAssignerBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            stateMachine = new DomainClassWashingMachineAssignerStateMachine(this, logger);
        }

        string attr_HotelID;
        bool stateof_HotelID = false;

        DomainClassWashingMachineAssignerStateMachine stateMachine;
        bool stateof_current_state = false;

        DomainTypeComplexDataType attr_Test;
        bool stateof_Test = false;


        public string Attr_HotelID { get { return attr_HotelID; } }
        public int Attr_current_state { get { return stateMachine.CurrentState; } }
        public DomainTypeComplexDataType Attr_Test { get { return attr_Test; } set { attr_Test = value; stateof_Test = true; } }

        private DomainClassHotel relR10Hotel;

        public DomainClassHotel LinkedR10()
        {
            if (relR10Hotel == null)
            {
                var candidates = instanceRepository.GetDomainInstances("Hotel").Where(inst=>(this.Attr_HotelID==((DomainClassHotel)inst).Attr_HotelID));
                relR10Hotel = (DomainClassHotel)candidates.First();
            }
            return relR10Hotel;
        }

        public bool LinkR10(DomainClassHotel instance)
        {
            bool result = false;
            if (relR10Hotel == null)
            {
                this.attr_HotelID = instance.Attr_HotelID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={this.Attr_HotelID}):link[Hotel(HotelID={instance.Attr_HotelID})]");

                result = true;
            }
            return result;
        }
        public bool UnlinkR10(DomainClassHotel instance)
        {
            bool result = false;
            if (relR10Hotel != null && ( this.Attr_HotelID==instance.Attr_HotelID ))
            {
                this.attr_HotelID = null;
                relR10Hotel = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={this.Attr_HotelID}):unlink[Hotel(HotelID={instance.Attr_HotelID})]");


                result = true;
            }
            return result;
        }

        public IEnumerable<DomainClassAvailableWorkingSpec> LinkedR11AssigningTarget()
        {
            var result = new List<DomainClassAvailableWorkingSpec>();
            var candidates = instanceRepository.GetDomainInstances("AvailableWorkingSpec").Where(inst=>(this.Attr_HotelID==((DomainClassAvailableWorkingSpec)inst).Attr_HotelID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassAvailableWorkingSpec)c);
            }
            return result;
        }
        public void TakeEvent(EventData domainEvent)
        {
            stateMachine.ReceivedEvent(domainEvent).Wait();
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={this.Attr_HotelID}):takeEvent({domainEvent.EventNumber})");
        }

        
        public bool Validate()
        {
            bool isValid = true;
            if (relR10Hotel == null)
            {
                isValid = false;
            }
            if (this.LinkedR11AssigningTarget().Count() == 0)
            {
                isValid = false;
            }

            return isValid;
        }

        public void Dispose()
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WashingMachineAssigner(HotelID={this.Attr_HotelID}):delete");

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            attr_HotelID = (string)propertyValues["HotelID"];
            stateof_HotelID = false;
            stateMachine.ForceUpdateState((int)propertyValues["current_state"]);
            attr_Test = (DomainTypeComplexDataType)propertyValues["Test"];
            stateof_Test = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_HotelID)
            {
                results.Add("HotelID", attr_HotelID);
                stateof_HotelID = false;
            }
            results.Add("current_state", stateMachine.CurrentState);

            if (stateof_Test)
            {
                results.Add("Test", attr_Test);
                stateof_Test = false;
            }

            return results;
        }
        
        public IDictionary<string, object> GetProperties()
        {
            var results = new Dictionary<string, object>();

            results.Add("HotelID", attr_HotelID);
            results.Add("current_state", stateMachine.CurrentState);
            results.Add("Test", attr_Test);

            return results;
        }

    }
}
