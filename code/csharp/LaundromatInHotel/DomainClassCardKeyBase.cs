// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.0.1
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;

namespace LaundromatInHotel
{
    public partial class DomainClassCardKeyBase : DomainClassCardKey
    {
        private static readonly string className = "CardKey";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassCardKeyBase CreateInstance(InstanceRepository instanceRepository, Logger logger)
        {
            var newInstance = new DomainClassCardKeyBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:CardKey(CardKeyID={newInstance.Attr_CardKeyID}):create");

            instanceRepository.Add(newInstance);

            return newInstance;
        }

        public DomainClassCardKeyBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_CardKeyID = Guid.NewGuid().ToString();
        }

        string attr_CardKeyID;
        string attr_GuestStayID;

        public string Attr_CardKeyID { get { return attr_CardKeyID; } set { attr_CardKeyID = value; } }
        public string Attr_GuestStayID { get { return attr_GuestStayID; } }

        private DomainClassGuestStay relR6GuestStayIsAssignedAsKeyFor;

        public DomainClassGuestStay LinkedR6IsAssignedAsKeyFor()
        {
            if (relR6GuestStayIsAssignedAsKeyFor == null)
            {
                var candidates = instanceRepository.GetDomainInstances("GuestStay").Where(inst=>(this.Attr_GuestStayID==((DomainClassGuestStay)inst).Attr_GuestStayID));
                relR6GuestStayIsAssignedAsKeyFor = (DomainClassGuestStay)candidates.First();
            }
            return relR6GuestStayIsAssignedAsKeyFor;
        }

        public bool LinkR6IsAssignedAsKeyFor(DomainClassGuestStay instance)
        {
            bool result = false;
            if (relR6GuestStayIsAssignedAsKeyFor == null)
            {
                this.attr_GuestStayID = instance.Attr_GuestStayID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:CardKey(CardKeyID={this.Attr_CardKeyID}):link[GuestStay(GuestStayID={instance.Attr_GuestStayID})]");

                result = true;
            }
            return result;
        }
        public bool UnlinkR6IsAssignedAsKeyFor(DomainClassGuestStay instance)
        {
            bool result = false;
            if (relR6GuestStayIsAssignedAsKeyFor != null && ( this.Attr_GuestStayID==instance.Attr_GuestStayID ))
            {
                this.attr_GuestStayID = null;
                relR6GuestStayIsAssignedAsKeyFor = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:CardKey(CardKeyID={this.Attr_CardKeyID}):unlink[GuestStay(GuestStayID={instance.Attr_GuestStayID})]");


                result = true;
            }
            return result;
        }
        
        public bool Validate()
        {
            bool isValid = true;
            if (relR6GuestStayIsAssignedAsKeyFor == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void Dispose()
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:CardKey(CardKeyID={this.Attr_CardKeyID}):delete");

            instanceRepository.Delete(this);
        }
    }
}
