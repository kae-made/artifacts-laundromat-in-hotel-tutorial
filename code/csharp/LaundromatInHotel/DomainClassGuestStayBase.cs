// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace LaundromatInHotel
{
    public partial class DomainClassGuestStayBase : DomainClassGuestStay
    {
        protected static readonly string className = "GuestStay";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassGuestStayBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null)
        {
            var newInstance = new DomainClassGuestStayBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:GuestStay(GuestStayID={newInstance.Attr_GuestStayID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassGuestStayBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_GuestStayID = Guid.NewGuid().ToString();
        }

        protected string attr_GuestStayID;
        protected bool stateof_GuestStayID = false;

        protected DateTime attr_StartTime;
        protected bool stateof_StartTime = false;

        protected DateTime attr_EndTimeOfValidity;
        protected bool stateof_EndTimeOfValidity = false;

        protected string attr_RoomID;
        protected bool stateof_RoomID = false;

        protected int attr_Charge;
        protected bool stateof_Charge = false;


        public string Attr_GuestStayID { get { return attr_GuestStayID; } set { attr_GuestStayID = value; stateof_GuestStayID = true; } }
        public DateTime Attr_StartTime { get { return attr_StartTime; } set { attr_StartTime = value; stateof_StartTime = true; } }
        public DateTime Attr_EndTimeOfValidity { get { return attr_EndTimeOfValidity; } set { attr_EndTimeOfValidity = value; stateof_EndTimeOfValidity = true; } }
        public string Attr_RoomID { get { return attr_RoomID; } }
        public int Attr_Charge { get { return attr_Charge; } set { attr_Charge = value; stateof_Charge = true; } }

        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassGuestStay instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "GuestStayID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_GuestStayID)
                        {
                            result = false;
                        }
                        break;
                    case "StartTime":
                        if ((DateTime)conditionPropertyValues[propertyName] != instance.Attr_StartTime)
                        {
                            result = false;
                        }
                        break;
                    case "EndTimeOfValidity":
                        if ((DateTime)conditionPropertyValues[propertyName] != instance.Attr_EndTimeOfValidity)
                        {
                            result = false;
                        }
                        break;
                    case "RoomID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_RoomID)
                        {
                            result = false;
                        }
                        break;
                    case "Charge":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_Charge)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }

        protected LinkedInstance relR4GuestRoomIsAssignedFor;

        public DomainClassGuestRoom LinkedR4IsAssignedFor()
        {
            if (relR4GuestRoomIsAssignedFor == null)
            {
                var candidates = instanceRepository.GetDomainInstances("GuestRoom").Where(inst=>(this.Attr_RoomID==((DomainClassGuestRoom)inst).Attr_RoomID));
                relR4GuestRoomIsAssignedFor = new LinkedInstance() { Source = this, Destination = candidates.First(), RelationshipID = "R4", Phrase = "IsAssignedFor" };

            }
            return relR4GuestRoomIsAssignedFor.GetDestination<DomainClassGuestRoom>();
        }

        public bool LinkR4IsAssignedFor(DomainClassGuestRoom instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR4GuestRoomIsAssignedFor == null)
            {
                this.attr_RoomID = instance.Attr_RoomID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:GuestStay(GuestStayID={this.Attr_GuestStayID}):link[GuestRoom(RoomID={instance.Attr_RoomID})]");

                result = (LinkedR4IsAssignedFor()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR4GuestRoomIsAssignedFor });
                }
            }
            return result;
        }

        public bool UnlinkR4IsAssignedFor(DomainClassGuestRoom instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR4GuestRoomIsAssignedFor != null && ( this.Attr_RoomID==instance.Attr_RoomID ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR4GuestRoomIsAssignedFor });

                this.attr_RoomID = null;
                relR4GuestRoomIsAssignedFor = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:GuestStay(GuestStayID={this.Attr_GuestStayID}):unlink[GuestRoom(RoomID={instance.Attr_RoomID})]");


                result = true;
            }
            return result;
        }

        public IEnumerable<DomainClassGuest> LinkedR5()
        {
            var result = new List<DomainClassGuest>();
            var candidates = instanceRepository.GetDomainInstances("Guest").Where(inst=>(this.Attr_GuestStayID==((DomainClassGuest)inst).Attr_GuestStayId));
            foreach (var c in candidates)
            {
                result.Add((DomainClassGuest)c);
            }
            return result;
        }
        public DomainClassCardKey LinkedR6()
        {
            var candidates = instanceRepository.GetDomainInstances("CardKey").Where(inst=>(this.Attr_GuestStayID==((DomainClassCardKey)inst).Attr_GuestStayID));
            return (DomainClassCardKey)candidates.First();
        }
        public DomainClassWashingMachineReservation LinkedR12RequestOfReservation()
        {
            var candidates = instanceRepository.GetDomainInstances("WashingMachineReservation").Where(inst=>(this.Attr_GuestStayID==((DomainClassWashingMachineReservation)inst).Attr_GuestStayID));
            return (DomainClassWashingMachineReservation)candidates.First();
        }
        public IEnumerable<DomainClassWashingMachineinUse> LinkedR18OneIsUsing()
        {
            var result = new List<DomainClassWashingMachineinUse>();
            var candidates = instanceRepository.GetDomainInstances("WashingMachineinUse").Where(inst=>(this.Attr_GuestStayID==((DomainClassWashingMachineinUse)inst).Attr_GuestStayID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassWashingMachineinUse)c);
            }
            return result;
        }
        
        public bool Validate()
        {
            bool isValid = true;
            if (relR4GuestRoomIsAssignedFor == null)
            {
                isValid = false;
            }
            if (this.LinkedR5().Count() == 0)
            {
                isValid = false;
            }

            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:GuestStay(GuestStayID={this.Attr_GuestStayID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            attr_GuestStayID = (string)propertyValues["GuestStayID"];
            stateof_GuestStayID = false;
            attr_StartTime = (DateTime)propertyValues["StartTime"];
            stateof_StartTime = false;
            attr_EndTimeOfValidity = (DateTime)propertyValues["EndTimeOfValidity"];
            stateof_EndTimeOfValidity = false;
            attr_RoomID = (string)propertyValues["RoomID"];
            stateof_RoomID = false;
            attr_Charge = (int)propertyValues["Charge"];
            stateof_Charge = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_GuestStayID)
            {
                results.Add("GuestStayID", attr_GuestStayID);
                stateof_GuestStayID = false;
            }
            if (stateof_StartTime)
            {
                results.Add("StartTime", attr_StartTime);
                stateof_StartTime = false;
            }
            if (stateof_EndTimeOfValidity)
            {
                results.Add("EndTimeOfValidity", attr_EndTimeOfValidity);
                stateof_EndTimeOfValidity = false;
            }
            if (stateof_RoomID)
            {
                results.Add("RoomID", attr_RoomID);
                stateof_RoomID = false;
            }
            if (stateof_Charge)
            {
                results.Add("Charge", attr_Charge);
                stateof_Charge = false;
            }

            return results;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            results.Add("GuestStayID", attr_GuestStayID);
            if (!onlyIdentity) results.Add("StartTime", attr_StartTime);
            if (!onlyIdentity) results.Add("EndTimeOfValidity", attr_EndTimeOfValidity);
            if (!onlyIdentity) results.Add("RoomID", attr_RoomID);
            if (!onlyIdentity) results.Add("Charge", attr_Charge);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
