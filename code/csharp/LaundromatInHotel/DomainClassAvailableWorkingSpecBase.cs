// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace LaundromatInHotel
{
    public partial class DomainClassAvailableWorkingSpecBase : DomainClassAvailableWorkingSpec
    {
        protected static readonly string className = "AvailableWorkingSpec";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassAvailableWorkingSpecBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null)
        {
            var newInstance = new DomainClassAvailableWorkingSpecBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AvailableWorkingSpec(MachineID={newInstance.Attr_MachineID},WorkingSpecID={newInstance.Attr_WorkingSpecID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassAvailableWorkingSpecBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
        }

        protected string attr_HotelID;
        protected bool stateof_HotelID = false;

        protected string attr_MachineID;
        protected bool stateof_MachineID = false;

        protected string attr_WorkingSpecID;
        protected bool stateof_WorkingSpecID = false;

        protected int attr_PreAlarmSec;
        protected bool stateof_PreAlarmSec = false;


        public string Attr_HotelID { get { return attr_HotelID; } }
        public string Attr_MachineID { get { return attr_MachineID; } }
        public string Attr_WorkingSpecID { get { return attr_WorkingSpecID; } }
        public int Attr_PreAlarmSec { get { return attr_PreAlarmSec; } set { attr_PreAlarmSec = value; stateof_PreAlarmSec = true; } }

        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassAvailableWorkingSpec instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "HotelID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_HotelID)
                        {
                            result = false;
                        }
                        break;
                    case "MachineID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_MachineID)
                        {
                            result = false;
                        }
                        break;
                    case "WorkingSpecID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_WorkingSpecID)
                        {
                            result = false;
                        }
                        break;
                    case "PreAlarmSec":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_PreAlarmSec)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }

        protected LinkedInstance relR11WashingMachineAssigner;
        protected LinkedInstance relR8WashingMachine;
        // private DomainClassWashingMachine relR8WashingMachine;
        protected LinkedInstance relR8WorkingSpecAvailableSpec;
        // private DomainClassWorkingSpec relR8WorkingSpecAvailableSpec;

        public DomainClassWashingMachineAssigner LinkedR11()
        {
            if (relR11WashingMachineAssigner == null)
            {
                var candidates = instanceRepository.GetDomainInstances("WashingMachineAssigner").Where(inst=>(this.Attr_HotelID==((DomainClassWashingMachineAssigner)inst).Attr_HotelID));
                relR11WashingMachineAssigner = new LinkedInstance() { Source = this, Destination = candidates.First(), RelationshipID = "R11", Phrase = "" };

            }
            return relR11WashingMachineAssigner.GetDestination<DomainClassWashingMachineAssigner>();
        }

        public bool LinkR11(DomainClassWashingMachineAssigner instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR11WashingMachineAssigner == null)
            {
                this.attr_HotelID = instance.Attr_HotelID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AvailableWorkingSpec(MachineID={this.Attr_MachineID},WorkingSpecID={this.Attr_WorkingSpecID}):link[WashingMachineAssigner(HotelID={instance.Attr_HotelID})]");

                result = (LinkedR11()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR11WashingMachineAssigner });
                }
            }
            return result;
        }

        public bool UnlinkR11(DomainClassWashingMachineAssigner instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR11WashingMachineAssigner != null && ( this.Attr_HotelID==instance.Attr_HotelID ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR11WashingMachineAssigner });

                this.attr_HotelID = null;
                relR11WashingMachineAssigner = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AvailableWorkingSpec(MachineID={this.Attr_MachineID},WorkingSpecID={this.Attr_WorkingSpecID}):unlink[WashingMachineAssigner(HotelID={instance.Attr_HotelID})]");


                result = true;
            }
            return result;
        }
        public bool LinkR8(DomainClassWashingMachine oneInstance, DomainClassWorkingSpec otherInstanceAvailableSpec, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR8WashingMachine == null && relR8WorkingSpecAvailableSpec == null)
            {
                this.attr_MachineID = oneInstance.Attr_MachineID;
                this.attr_WorkingSpecID = otherInstanceAvailableSpec.Attr_WorkingSpecID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AvailableWorkingSpec(MachineID={this.Attr_MachineID},WorkingSpecID={this.Attr_WorkingSpecID}):link[One(WashingMachine(MachineID={oneInstance.Attr_MachineID})),Other(WorkingSpec(WorkingSpecID={otherInstanceAvailableSpec.Attr_WorkingSpecID}))]");

                result = (LinkedR8One()!=null) && (LinkedR8OtherAvailableSpec()!=null);
                if (result)
                {
                    if (changedStates != null)
                    {
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR8WashingMachine });
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR8WorkingSpecAvailableSpec });
                    }
                }
            }
            return result;
        }
        public bool UnlinkR8(DomainClassWashingMachine oneInstance, DomainClassWorkingSpec otherInstanceAvailableSpec, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR8WashingMachine != null && relR8WorkingSpecAvailableSpec != null)
            {
                if ((this.Attr_MachineID==oneInstance.Attr_MachineID) && (this.Attr_WorkingSpecID==otherInstanceAvailableSpec.Attr_WorkingSpecID))
                {
                    if (changedStates != null)
                    {
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR8WashingMachine });
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR8WorkingSpecAvailableSpec });
                    }

                    this.attr_MachineID = null;
                    this.attr_WorkingSpecID = null;
                    relR8WashingMachine = null;
                    relR8WorkingSpecAvailableSpec = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AvailableWorkingSpec(MachineID={this.Attr_MachineID},WorkingSpecID={this.Attr_WorkingSpecID}):unlink[WashingMachine(MachineID={oneInstance.Attr_MachineID})]");

                    result = true;
                }
            }
            return result;
        }
        public DomainClassWashingMachine LinkedR8One()
        {
            if (relR8WashingMachine == null)
            {
                var candidates = instanceRepository.GetDomainInstances("WashingMachine").Where(inst=>(this.Attr_MachineID==((DomainClassWashingMachine)inst).Attr_MachineID));
                relR8WashingMachine = new LinkedInstance() { Source = this, Destination = candidates.First(), RelationshipID = "R8", Phrase = "" };
                // (DomainClassWashingMachine)candidates.First();
            }
            return relR8WashingMachine.GetDestination<DomainClassWashingMachine>();
        }
        public DomainClassWorkingSpec LinkedR8OtherAvailableSpec()
        {
            if (relR8WorkingSpecAvailableSpec == null)
            {
                var candidates = instanceRepository.GetDomainInstances("WorkingSpec").Where(inst=>(this.Attr_WorkingSpecID==((DomainClassWorkingSpec)inst).Attr_WorkingSpecID));
                relR8WorkingSpecAvailableSpec = new LinkedInstance() { Source = this, Destination = candidates.First(), RelationshipID = "R8", Phrase = "AvailableSpec" };
                // (DomainClassWorkingSpec)candidates.First();
            }
            return relR8WorkingSpecAvailableSpec.GetDestination<DomainClassWorkingSpec>();
        }


        public DomainClassWashingMachineinUse LinkedR9()
        {
            var candidates = instanceRepository.GetDomainInstances("WashingMachineinUse").Where(inst=>(this.Attr_WorkingSpecID==((DomainClassWashingMachineinUse)inst).Attr_WorkingSpecID && this.Attr_MachineID==((DomainClassWashingMachineinUse)inst).Attr_MachineID));
            return (DomainClassWashingMachineinUse)candidates.First();
        }
        public IEnumerable<DomainClassWashingMachineReservation> LinkedR13()
        {
            var result = new List<DomainClassWashingMachineReservation>();
            var candidates = instanceRepository.GetDomainInstances("WashingMachineReservation").Where(inst=>(this.Attr_WorkingSpecID==((DomainClassWashingMachineReservation)inst).Attr_WorkingSpecID && this.Attr_MachineID==((DomainClassWashingMachineReservation)inst).Attr_MachineID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassWashingMachineReservation)c);
            }
            return result;
        }
        
        public bool Validate()
        {
            bool isValid = true;
            if (relR11WashingMachineAssigner == null)
            {
                isValid = false;
            }
            if (relR8WashingMachine == null)
            {
                isValid = false;
            }
            if (relR8WorkingSpecAvailableSpec == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AvailableWorkingSpec(MachineID={this.Attr_MachineID},WorkingSpecID={this.Attr_WorkingSpecID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            attr_HotelID = (string)propertyValues["HotelID"];
            stateof_HotelID = false;
            attr_MachineID = (string)propertyValues["MachineID"];
            stateof_MachineID = false;
            attr_WorkingSpecID = (string)propertyValues["WorkingSpecID"];
            stateof_WorkingSpecID = false;
            attr_PreAlarmSec = (int)propertyValues["PreAlarmSec"];
            stateof_PreAlarmSec = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_HotelID)
            {
                results.Add("HotelID", attr_HotelID);
                stateof_HotelID = false;
            }
            if (stateof_MachineID)
            {
                results.Add("MachineID", attr_MachineID);
                stateof_MachineID = false;
            }
            if (stateof_WorkingSpecID)
            {
                results.Add("WorkingSpecID", attr_WorkingSpecID);
                stateof_WorkingSpecID = false;
            }
            if (stateof_PreAlarmSec)
            {
                results.Add("PreAlarmSec", attr_PreAlarmSec);
                stateof_PreAlarmSec = false;
            }

            return results;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("HotelID", attr_HotelID);
            if (!onlyIdentity) results.Add("MachineID", attr_MachineID);
            if (!onlyIdentity) results.Add("WorkingSpecID", attr_WorkingSpecID);
            if (!onlyIdentity) results.Add("PreAlarmSec", attr_PreAlarmSec);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
