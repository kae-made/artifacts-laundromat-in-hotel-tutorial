// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.0.1
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;

namespace LaundromatInHotel
{
    public partial class DomainClassWorkingSpecBase : DomainClassWorkingSpec
    {
        private static readonly string className = "WorkingSpec";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassWorkingSpecBase CreateInstance(InstanceRepository instanceRepository, Logger logger)
        {
            var newInstance = new DomainClassWorkingSpecBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WorkingSpec(WorkingSpecID={newInstance.Attr_WorkingSpecID}):create");

            instanceRepository.Add(newInstance);

            return newInstance;
        }

        public DomainClassWorkingSpecBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_WorkingSpecID = Guid.NewGuid().ToString();
        }

        string attr_WorkingSpecID;
        bool stateof_WorkingSpecID = false;

        int attr_WashingTime;
        bool stateof_WashingTime = false;

        int attr_DryingTime;
        bool stateof_DryingTime = false;

        int attr_StandardWeight;
        bool stateof_StandardWeight = false;

        int attr_Price;
        bool stateof_Price = false;


        public string Attr_WorkingSpecID { get { return attr_WorkingSpecID; } set { attr_WorkingSpecID = value; stateof_WorkingSpecID = true; } }
        public int Attr_WashingTime { get { return attr_WashingTime; } set { attr_WashingTime = value; stateof_WashingTime = true; } }
        public int Attr_DryingTime { get { return attr_DryingTime; } set { attr_DryingTime = value; stateof_DryingTime = true; } }
        public int Attr_StandardWeight { get { return attr_StandardWeight; } set { attr_StandardWeight = value; stateof_StandardWeight = true; } }
        public int Attr_Price { get { return attr_Price; } set { attr_Price = value; stateof_Price = true; } }

        public IEnumerable<DomainClassAvailableWorkingSpec> LinkedR8Other()
        {
            var result = new List<DomainClassAvailableWorkingSpec>();
            var candidates = instanceRepository.GetDomainInstances("AvailableWorkingSpec").Where(inst=>(this.Attr_WorkingSpecID==((DomainClassAvailableWorkingSpec)inst).Attr_WorkingSpecID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassAvailableWorkingSpec)c);
            }
            return result;
        }
        
        public bool Validate()
        {
            bool isValid = true;
            if (this.LinkedR8Other().Count() == 0)
            {
                isValid = false;
            }

            return isValid;
        }

        public void Dispose()
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WorkingSpec(WorkingSpecID={this.Attr_WorkingSpecID}):delete");

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(Dictionary<string, object> propertyValues)
        {
            attr_WorkingSpecID = (string)propertyValues["WorkingSpecID"];
            stateof_WorkingSpecID = false;
            attr_WashingTime = (int)propertyValues["WashingTime"];
            stateof_WashingTime = false;
            attr_DryingTime = (int)propertyValues["DryingTime"];
            stateof_DryingTime = false;
            attr_StandardWeight = (int)propertyValues["StandardWeight"];
            stateof_StandardWeight = false;
            attr_Price = (int)propertyValues["Price"];
            stateof_Price = false;
        }
        
        public Dictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_WorkingSpecID)
            {
                results.Add("WorkingSpecID", attr_WorkingSpecID);
                stateof_WorkingSpecID = false;
            }
            if (stateof_WashingTime)
            {
                results.Add("WashingTime", attr_WashingTime);
                stateof_WashingTime = false;
            }
            if (stateof_DryingTime)
            {
                results.Add("DryingTime", attr_DryingTime);
                stateof_DryingTime = false;
            }
            if (stateof_StandardWeight)
            {
                results.Add("StandardWeight", attr_StandardWeight);
                stateof_StandardWeight = false;
            }
            if (stateof_Price)
            {
                results.Add("Price", attr_Price);
                stateof_Price = false;
            }

            return results;
        }
        
        public Dictionary<string, object> GetProperties()
        {
            var results = new Dictionary<string, object>();
            results.Add("WorkingSpecID", attr_WorkingSpecID);
            results.Add("WashingTime", attr_WashingTime);
            results.Add("DryingTime", attr_DryingTime);
            results.Add("StandardWeight", attr_StandardWeight);
            results.Add("Price", attr_Price);

            return results;
        }

    }
}
