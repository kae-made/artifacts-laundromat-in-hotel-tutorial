// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.0.1
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;

namespace LaundromatInHotel
{
    public partial class DomainClassWashingMachineBase : DomainClassWashingMachine
    {
        private static readonly string className = "WashingMachine";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;

        public static DomainClassWashingMachineBase CreateInstance(InstanceRepository instanceRepository)
        {
            var newInstance = new DomainClassWashingMachineBase(instanceRepository);
            instanceRepository.Add(newInstance);

            return newInstance;
        }

        public DomainClassWashingMachineBase(InstanceRepository instanceRepository)
        {
            this.instanceRepository = instanceRepository;
            attr_MachineID = Guid.NewGuid().ToString();
            stateMachine = new DomainClassWashingMachineStateMachine(this);
        }

        string attr_MachineID;
        string attr_FriendryName;
        bool attr_IsBusy;
        string attr_RoomID;
        string attr_DoorID;
        DomainTypeWashingMachineStatus attr_Status;
        DomainClassWashingMachineStateMachine stateMachine;

        public string Attr_MachineID { get { return attr_MachineID; } set { attr_MachineID = value; } }
        public string Attr_FriendryName { get { return attr_FriendryName; } set { attr_FriendryName = value; } }
        public bool Attr_IsBusy { get { return attr_IsBusy; } set { attr_IsBusy = value; } }
        public string Attr_RoomID { get { return attr_RoomID; } }
        public string Attr_DoorID { get { return attr_DoorID; } }
        public DomainTypeWashingMachineStatus Attr_Status { get { return attr_Status; } set { attr_Status = value; } }
        public int Attr_current_state { get { return stateMachine.CurrentState; } }

        private DomainClassLaundromatRoom relR2LaundromatRoomIsSetUpAt;
        private DomainClassDoorwithLock relR14DoorwithLockFrontDoor;

        public DomainClassLaundromatRoom LinkedR2IsSetUpAt()
        {
            if (relR2LaundromatRoomIsSetUpAt == null)
            {
                var candidates = instanceRepository.GetDomainInstances("LaundromatRoom").Where(inst=>(this.Attr_RoomID==((DomainClassLaundromatRoom)inst).Attr_RoomID));
                relR2LaundromatRoomIsSetUpAt = (DomainClassLaundromatRoom)candidates.First();
            }
            return relR2LaundromatRoomIsSetUpAt;
        }

        public bool LinkR2IsSetUpAt(DomainClassLaundromatRoom instance)
        {
            bool result = false;
            if (relR2LaundromatRoomIsSetUpAt == null)
            {
                this.attr_RoomID = instance.Attr_RoomID;
                result = true;
            }
            return result;
        }
        public bool UnlinkR2IsSetUpAt(DomainClassLaundromatRoom instance)
        {
            bool result = false;
            if (relR2LaundromatRoomIsSetUpAt != null && ( this.Attr_RoomID==instance.Attr_RoomID ))
            {
                this.attr_RoomID = null;
                relR2LaundromatRoomIsSetUpAt = null;
                result = true;
            }
            return result;
        }
        public DomainClassDoorwithLock LinkedR14FrontDoor()
        {
            if (relR14DoorwithLockFrontDoor == null)
            {
                var candidates = instanceRepository.GetDomainInstances("DoorwithLock").Where(inst=>(this.Attr_DoorID==((DomainClassDoorwithLock)inst).Attr_DoorID));
                relR14DoorwithLockFrontDoor = (DomainClassDoorwithLock)candidates.First();
            }
            return relR14DoorwithLockFrontDoor;
        }

        public bool LinkR14FrontDoor(DomainClassDoorwithLock instance)
        {
            bool result = false;
            if (relR14DoorwithLockFrontDoor == null)
            {
                this.attr_DoorID = instance.Attr_DoorID;
                result = true;
            }
            return result;
        }
        public bool UnlinkR14FrontDoor(DomainClassDoorwithLock instance)
        {
            bool result = false;
            if (relR14DoorwithLockFrontDoor != null && ( this.Attr_DoorID==instance.Attr_DoorID ))
            {
                this.attr_DoorID = null;
                relR14DoorwithLockFrontDoor = null;
                result = true;
            }
            return result;
        }

        public IEnumerable<DomainClassAvailableWorkingSpec> LinkedR8OneAvailableSpec()
        {
            var result = new List<DomainClassAvailableWorkingSpec>();
            var candidates = instanceRepository.GetDomainInstances("AvailableWorkingSpec").Where(inst=>(this.Attr_MachineID==((DomainClassAvailableWorkingSpec)inst).Attr_MachineID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassAvailableWorkingSpec)c);
            }
            return result;
        }
        public SubClassR15 GetSubR15()
        {
            SubClassR15 result = null;
            var subClassKeys = new List<string>() { "NonReservationWashingMachine", "ReservableWashingMachine" };
            foreach (var key in subClassKeys)
            {
                var candidates = instanceRepository.GetDomainInstances(key).Where(inst=>((this == ((SubClassR15)inst).GetSuperClassR15())));
                if (candidates.Count()>0)
                {
                    result = (SubClassR15)candidates.First();
                    break;
                }
            }
            return result;
        }
        public DomainClassWashingMachineinUse LinkedR18OtherIsUsedBy()
        {
            var candidates = instanceRepository.GetDomainInstances("WashingMachineinUse").Where(inst=>(this.Attr_MachineID==((DomainClassWashingMachineinUse)inst).Attr_MachineID));
            return (DomainClassWashingMachineinUse)candidates.First();
        }
        public void TakeEvent(EventData domainEvent)
        {
            stateMachine.ReceivedEvent(domainEvent).Wait();
        }

        
        public bool Validate()
        {
            bool isValid = true;
            if (relR2LaundromatRoomIsSetUpAt == null)
            {
                isValid = false;
            }
            if (relR14DoorwithLockFrontDoor == null)
            {
                isValid = false;
            }
            if (this.LinkedR8OneAvailableSpec().Count() == 0)
            {
                isValid = false;
            }

            if (this.GetSubR15() == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void Dispose()
        {
            instanceRepository.Delete(this);
        }
    }
}
