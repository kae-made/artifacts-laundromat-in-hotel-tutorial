// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.0.1
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;

namespace LaundromatInHotel
{
    public partial class DomainClassGuestBase : DomainClassGuest
    {
        private static readonly string className = "Guest";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassGuestBase CreateInstance(InstanceRepository instanceRepository, Logger logger)
        {
            var newInstance = new DomainClassGuestBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:Guest(GuestID={newInstance.Attr_GuestID}):create");

            instanceRepository.Add(newInstance);

            return newInstance;
        }

        public DomainClassGuestBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_GuestID = Guid.NewGuid().ToString();
        }

        string attr_Name;
        bool stateof_Name = false;

        string attr_GuestID;
        bool stateof_GuestID = false;

        string attr_GuestStayId;
        bool stateof_GuestStayId = false;

        string attr_MailAddress;
        bool stateof_MailAddress = false;


        public string Attr_Name { get { return attr_Name; } set { attr_Name = value; stateof_Name = true; } }
        public string Attr_GuestID { get { return attr_GuestID; } set { attr_GuestID = value; stateof_GuestID = true; } }
        public string Attr_GuestStayId { get { return attr_GuestStayId; } }
        public string Attr_MailAddress { get { return attr_MailAddress; } set { attr_MailAddress = value; stateof_MailAddress = true; } }

        private DomainClassGuestStay relR5GuestStayHaveTheRightToUse;

        public DomainClassGuestStay LinkedR5HaveTheRightToUse()
        {
            if (relR5GuestStayHaveTheRightToUse == null)
            {
                var candidates = instanceRepository.GetDomainInstances("GuestStay").Where(inst=>(this.Attr_GuestStayId==((DomainClassGuestStay)inst).Attr_GuestStayID));
                relR5GuestStayHaveTheRightToUse = (DomainClassGuestStay)candidates.First();
            }
            return relR5GuestStayHaveTheRightToUse;
        }

        public bool LinkR5HaveTheRightToUse(DomainClassGuestStay instance)
        {
            bool result = false;
            if (relR5GuestStayHaveTheRightToUse == null)
            {
                this.attr_GuestStayId = instance.Attr_GuestStayID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:Guest(GuestID={this.Attr_GuestID}):link[GuestStay(GuestStayID={instance.Attr_GuestStayID})]");

                result = true;
            }
            return result;
        }
        public bool UnlinkR5HaveTheRightToUse(DomainClassGuestStay instance)
        {
            bool result = false;
            if (relR5GuestStayHaveTheRightToUse != null && ( this.Attr_GuestStayId==instance.Attr_GuestStayID ))
            {
                this.attr_GuestStayId = null;
                relR5GuestStayHaveTheRightToUse = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:Guest(GuestID={this.Attr_GuestID}):unlink[GuestStay(GuestStayID={instance.Attr_GuestStayID})]");


                result = true;
            }
            return result;
        }
        
        public bool Validate()
        {
            bool isValid = true;
            if (relR5GuestStayHaveTheRightToUse == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void Dispose()
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:Guest(GuestID={this.Attr_GuestID}):delete");

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(Dictionary<string, object> propertyValues)
        {
            attr_Name = (string)propertyValues["Name"];
            stateof_Name = false;
            attr_GuestID = (string)propertyValues["GuestID"];
            stateof_GuestID = false;
            attr_GuestStayId = (string)propertyValues["GuestStayId"];
            stateof_GuestStayId = false;
            attr_MailAddress = (string)propertyValues["MailAddress"];
            stateof_MailAddress = false;
        }
        
        public Dictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_Name)
            {
                results.Add("Name", attr_Name);
                stateof_Name = false;
            }
            if (stateof_GuestID)
            {
                results.Add("GuestID", attr_GuestID);
                stateof_GuestID = false;
            }
            if (stateof_GuestStayId)
            {
                results.Add("GuestStayId", attr_GuestStayId);
                stateof_GuestStayId = false;
            }
            if (stateof_MailAddress)
            {
                results.Add("MailAddress", attr_MailAddress);
                stateof_MailAddress = false;
            }

            return results;
        }
        
        public Dictionary<string, object> GetProperties()
        {
            var results = new Dictionary<string, object>();
            results.Add("Name", attr_Name);
            results.Add("GuestID", attr_GuestID);
            results.Add("GuestStayId", attr_GuestStayId);
            results.Add("MailAddress", attr_MailAddress);

            return results;
        }

    }
}
